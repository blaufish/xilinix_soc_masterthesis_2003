#LyX 1.2 created this file. For more info see http://www.lyx.org/
\lyxformat 220
\textclass report
\begin_preamble
\renewcommand{\chaptermark}[1]{\markboth{\thechapter.\ #1}{}}
\fancyhead[LO,RE]{\thepage}
\fancyhead[RO,LE]{\leftmark}
\cfoot{}
\end_preamble
\language english
\inputencoding auto
\fontscheme pslatex
\graphics default
\paperfontsize default
\spacing single 
\papersize a4paper
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 2
\paperpagestyle fancy

\layout Title

Evaluating Xilinx MicroBlaze for 
\newline 
Network SoC solutions
\newline 
\SpecialChar ~

\newline 

\emph on 
Master Thesis in Computer Engineering
\emph default 

\newline 
\SpecialChar ~

\newline 
--- DRAFT - WORK IN PROGRESS ---
\newline 

\layout Author

Peter Magnusson
\newline 
petmag-8@sm.luth.se
\layout Abstract

This thesis explores the possibility of implementing a System on Chip (SoC)
 solution for network applications.
 Xilinx MicroBlaze soft processor core and IBM CoreConnect On-Chip Peripheral
 Bus (OPB) peripherals are utilized in the SoC.
 The SoC is implemented in Virtex Field Programmable Gate Array (FPGA) circuits
 manufactured by Xilinx.
\layout Abstract

Typical network SoC applications include Ethernet switches, Internet-connected
 embedded systems, small IP clients for handheld devices and simple Internet
 gateways.
\layout Chapter*

Acknowledgement
\layout Standard

The evaluation of the Xilinx MicroBlaze has been performed as a Master Thesis
 work in Computer Science and Engineering.
 The evaluation was performed at Department of Computer Science and Electrical
 Engineering (CSEE) and Embedded Internet Systems Laboratory (EISLAB) at
 Luleå University of Technology.
 
\layout Standard

I wish to thank 
\layout Itemize

Ph.d.
 Per Lindgren for supervising my thesis.
\layout Itemize

Ph.d.
 student Jonas Thor for feedback on various computer engineering topics.
\layout Itemize

MS.c.
 student Jens Eliasson for various MicroBlaze discussions.
\layout Itemize

MS.c.
 students Jan Dahlberg, Johan Mattsson and Frederik Schmid for reusing and
 verifying my Ethernet MAC.
\layout Itemize

Jens Eliasson and Tim Johansson for proof-reading my thesis.
\layout Standard

During my work on the thesis, I have taught MicroBlaze based System on Chip
 (SoC) development to MS.c.
 students in the Digital Synthesis Project course at CSEE.
 Additional credits goes to these students for valuable input.
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Standard


\begin_inset FloatList figure

\end_inset 


\layout Standard


\begin_inset FloatList table

\end_inset 


\layout Chapter


\begin_inset LatexCommand \label{cha:Introduction}

\end_inset 

Introduction
\layout Section

Objectives
\layout Section

Method
\layout Paragraph

Simple MicroBlaze systems
\layout Standard

were created using MicroBlaze Development Kit.
 Microblaze development tutorials 
\begin_inset LatexCommand \cite{MB_TUTORIAL,MB_OPB_TUTORIAL}

\end_inset 

 was used to learn building MicroBlaze systems.
\layout Paragraph

Ethernet peripherals
\layout Standard

were developed network enable the MicroBlaze systems.
 These peripherals were developed for dual purposes:
\layout Itemize

to network enable MicroBlaze (MDK does not include network peripherals)
\layout Itemize

to futher verify that custom designed peripherals functioned properly (Network
 applications are easily monitored by remote for long periods of time, as
 opposed to several other peripherals)
\layout Section

Limitations
\layout Subsection

Time
\layout Standard

This Master Thesis work has been performed during a period of 6 months.
\layout Subsection

Software
\layout Standard

MicroBlaze Development Kit (MDK) 2.2 (Service Pack 2) has been used for this
 evalutation.
 Currently it remains the most recent release.
\layout Subsection

Hardware
\layout Subsubsection

XESS XSV-100 / XSV-800 Prototyping Board
\layout Standard

These are Xilinx Virtex based prototyping board.
 XSV-100 is equipped with a Virtex 100 FPGA, XSV-800 with a Virtex 800 FPGA.
 The Virtex chip is connected to a large set of interfaces, including:
\layout Itemize

Programmable 100 MHz oscillator, 
\begin_inset Formula $f=100/n$
\end_inset 

 MHz, 
\begin_inset Formula $n=1,2,3,4,...$
\end_inset 


\layout Itemize

An MII PHY connected to a twisted pair cable socket.
\layout Itemize

Two 512K
\begin_inset Formula $*$
\end_inset 

16 Bit SRAM memory banks.
\layout Subsubsection

Platinum Virtex-E Prototyping Board
\layout Standard

This is a proptyping board developed at Luleå University of Technology and
 intended to be available to this thesis work.
 Unfortunately, it was not verified in time to be used in the thesis.
 
\layout Standard

Platinum connects the Virtex-E chip with the following interfaces:
\layout Itemize

Four RMII PHYs, connected to twisted pair cable sockets.
\layout Itemize

Motorola Microcontroller.
\layout Chapter

Thesis outline
\layout Standard

\SpecialChar ~

\layout Standard

Chapter 
\begin_inset LatexCommand \ref{cha:Introduction}

\end_inset 

 gives a general introduction to the thesis and the work performed to evaluate
 Xilinx MicroBlaze.
 It also covers the objectives of the thesis work and the methods used.
 Limitations to work is also covered in this chapter.
\layout Standard

Chapter 
\begin_inset LatexCommand \ref{cha:Technology-&-Background}

\end_inset 

 covers the technologies which is used and referred to in the thesis.
\layout Standard

Chapter 
\begin_inset LatexCommand \ref{cha:Xilinx-MicroBlaze}

\end_inset 

 introduces Xilinx MicroBlaze and the MDK software.
\layout Standard

Chapter 
\begin_inset LatexCommand \ref{cha:Xilinx-MicroBlaze-as-a-Network-SoC}

\end_inset 

 investigates the possibility of using Xilinx MicroBlaze in a network SoC.
\layout Standard

Chapter 
\begin_inset LatexCommand \ref{cha:Development-of-Microblaze-ethernet-peripherals}

\end_inset 

 outlines the design of a set of Ethernet peripherals for Xilinx MicroBlaze.
\layout Standard

Chapter 
\begin_inset LatexCommand \ref{cha:Comparing-Ethernet-peripherals}

\end_inset 

 compares the Ethernet peripherals designed to a number of other Ethernet
 peripherals.
\layout Standard

Chapter 
\begin_inset LatexCommand \ref{cha:Network-software-for-Microblaze}

\end_inset 

 covers network software, such as TCP/IP stacks, available to Xilinx MicroBlaze.
\layout Standard

Chapter 
\begin_inset LatexCommand \ref{cha:Conclusions}

\end_inset 

 covers the conclusions drawn from the work on this thesis.
\layout Standard

Chapter 
\begin_inset LatexCommand \ref{cha:Future-work}

\end_inset 

 suggests future work which could improve the evaluation of MicroBlaze or
 to extend MicroBlaze's network capabilities.
\layout Chapter


\begin_inset LatexCommand \label{cha:Technology-&-Background}

\end_inset 

Technology & Background
\layout Section

System on Chip (SoC) solutions
\layout Standard

System on Chip (SoC) refers to devices where all essential parts of a computing
 systems have been integrated in a single circuit.
 
\layout Standard

A typical SoC includes one (or many) processor core(s), an arbitrary number
 of peripherals, some on-chip memory and a bus architecture which interconnects
 all these devices.
 A SoC may also contain a large set of I/O interfaces for e.g.
 external memory, off-chip peripherals and network interfaces.
\layout Standard

As SoCs usually are designed with a limited set of applications in mind
 they tend to need less processing power than a general purpose computer.
 While a modern workstation operates with clock frequencies in the range
 of 500 MHz - 3 GHz, the SoC CPU might operate at just a few megahertz.
 An ideal SoC processor core is operating at the minimum clock frequency
 needed to properly perform the desired application.
 By maintaining a low clock frequency the power consumption and chip temperature
 is reduced.
 This allows SoCs to operate with less cooling devices and better battery/power
 utilization.
\layout Subsection

System on Chip or Microcontroller?
\layout Standard


\begin_inset LatexCommand \cite{FOLDOC}

\end_inset 

 define Microcontroller as:
\layout Quotation

A microprocessor on a single integrated circuit intended to operate as an
 embedded system.
 As well as a CPU, a microcontroller typically includes small amounts of
 RAM and PROM and timers and I/O ports.
 An example is the Intel 8751.
 
\layout Standard

To make a destinction between microcontrollers and SoCs is hard; the words
 are synomical.
 The word SoC is currently more frequently used in reference to designs
 which are customized for a limited set of applications, while microcontroller
 tend to be used in reference to more general purpose embedded designs.
\layout Section

Application Specific Integrated Circuit (ASIC)
\layout Standard

Application Specific Integrated Circuit (ASIC) is one of the most common
 chip types.
 An ASIC may implement simple designs (
\begin_inset Quotes eld
\end_inset 

application
\begin_inset Quotes erd
\end_inset 

 in ASIC terms) but also large design such as SoCs.
\layout Standard

An ASIC is designed for a specific applications and can be heavily customized
 for reduced power dissipation, small area or high clock frequencies.
 Other important ASIC characteristics is low reconfigurability, long design
 phases, large startup costs and low mass production costs.
 This makes ASIC ideal for large scale manufacturing of well verified designs,
 but badly suited for prototypes.
\layout Section

Programmable logic device (PLD)
\layout Standard

Programmable logic devices are chips which can programmed to behave as an
 arbitrary design.
 A PLD may be programmed to implement something as simple as a small net
 of combinatorial logic, but it may also implement large designs such as
 a SoC.
 One common type of programmable logic devices is FPGAs.
\layout Subsection

Field Programmable Gate Array (FPGA)
\layout Standard

Field Programmable Gate Array (FPGA) is a type of programmable devices.
 FPGA is a generic architecture which consists of configurable logic blocks
 and programmable interconnect.
 FPGAs are expensive but may contain enough logic to implement large designs
 such as a System on Chip.
 
\layout Standard

FPGAs are not optimized for any specific application, and therefore they
 may consume more power or implement a design less efficient than a ASIC.
 However an FPGA is easily reprogrammed and which shortens design cycles
 and allows early real world tests.
 
\layout Standard

This makes FPGAs perfect for prototypes and small production volumes.
 FPGA may also be used for applications which are not of ASIC production
 quality.
 An example of this is first generation manufacturing where standards and
 applications are subject to change.
\layout Section

Processor cores
\layout Standard

A processor core refers to a processor 
\emph on 
excluding
\begin_inset Foot
collapsed false

\layout Standard

As opposed to a Microcontroller core which may include peripherals.
\end_inset 


\emph default 
 any peripherals it is used with.
 Traditionally processor cores has resided in dedicated processor chips.
 In SoC design the processor core(s) are integrated with peripherals in
 a single chip.
\layout Subsection

Soft, firm and hard cores
\layout Standard

The terms soft, firm and hard cores are originally ASIC manufacturing jargon.
 
\layout Itemize


\begin_inset Quotes eld
\end_inset 

Soft core
\begin_inset Quotes erd
\end_inset 

 refer to cores delivered as a technology dependent gate-level netlist.
\layout Itemize


\begin_inset Quotes eld
\end_inset 

Firm core
\begin_inset Quotes erd
\end_inset 

 refer to cores delivered as a library element.
\layout Itemize


\begin_inset Quotes eld
\end_inset 

Hard core
\begin_inset Quotes erd
\end_inset 

 refer to cores which has a fixed physical layout and is incorporated into
 the design as a standard cell.
\layout Standard

Firm and hard cores mainly apply to ASICs.
 Soft cores are commonly used in both ASICs as well as programmable logic.
\layout Subsection

Soft Processors
\layout Standard

Soft Processors are 
\begin_inset Quotes eld
\end_inset 

soft core
\begin_inset Quotes erd
\end_inset 

 processors - delivered as technology dependent netlists or HDL source code
 for synthesis.
 Soft processors have recently gained a lot of popularity.
 The popularity appears to be especially strong among FPGA developers.
 This is due to several factors: 
\layout Itemize

Performance increases (soft cores are now utilizing FPGA/ASICs better).
\layout Itemize

Increased performance/price ratio on FPGAs.
\layout Itemize

Increased availability of both commercial and academic cores.
\layout Itemize

Free Soft Processors have been released by teams consisting of professionals,
 academics and enthusiasts 
\begin_inset LatexCommand \cite{Site-fpgacpu.org,Site-OpenCores}

\end_inset 

.
\layout Subsection

Why are processor cores and software used?
\layout Standard

A Network SoC could be software in application specific logic (e.g.
 ASIC) or programmable logic (e.g.
 FPGA).
 However, there are several reasons to utilize a processor and run software
 on it.
\layout Itemize

Software can be partially tested and verified in other environments before
 they are implemented for ASIC/FPGA.
 Software may shorten design times and tend to be easier to develop.
\layout Itemize

Software version can be upgraded during operation without system downtime.
 Software is easily updated by remote.
\layout Itemize

Programmable logic (e.g.
 FPGA) usually take some time to update (ranging from a few seconds to a
 couple of minutes).
 FPGAs are typically not upgraded by remote, although possible 
\begin_inset LatexCommand \cite{XAPP632_Programming_via_E-Mail}

\end_inset 

.
\layout Itemize

ASIC logic is very hard to update.
 Support for changes must have been anticipated in advanced (several configurati
on registers or programmable logic blocks included).
 If changes have not been anticipated, a new ASIC may have to be manufactured.
\layout Standard

Overall processor cores and software support add flexibility and shorten
 development / bugfix / reconfiguration times.
\layout Section

IBM CoreConnect
\layout Standard

IBM CoreConnect 
\begin_inset LatexCommand \cite{CoreConnect_WhitePaper}

\end_inset 

 architecture is a small family of SoC busses.
 The design principle in CoreConnect is to provide different busses for
 different type of cores.
 By providing different busses, the overall design may be optimized for
 best performance while simple peripherals may be optimized for simplicity.
 
\layout Standard

IBM CoreConnecy features three busses:
\layout Itemize

Processor Local Bus (PLB): a high performance bus for interconnecting fast
 processor cores and high performance peripherals (PCI interfaces, memory
 interfaces etc)
\layout Itemize

On-Chip Peripheral Bus (OPB): a simple bus intended for use with peripherals
 which are slow or otherwise unsuited for PLB.
\layout Itemize

Device Control Register (DCR) Bus: a simple bus intended to distribute register
 values in an efficient manner.
\layout Standard

An IBM CoreConnect system may utilize DCR, OPB and PLB in a single SoC (as
 shown in figure 
\begin_inset LatexCommand \ref{cap:CoreConnect-based-SoC}

\end_inset 

) or only one or two of the bus architectures.
 A mixed system may use different systems clocks - often OPB uses a slower
 clock than PLB.
 PLB and OPB may be interconnected using OPB-to-PLB and PLB-to-OPB bridges.
 The CoreConnect busses share important characteristics:
\layout Itemize

CoreConnect is fully synchronous
\layout Itemize

CoreConnect does not require tri-state drivers
\layout Standard

The IBM CoreConnect architecture heavily customizeable and several CoreConnect
 architecture parameters may different between different implementations.
 Therefor IBM CoreConnect cores may 
\emph on 
not
\emph default 
 be compatible unless designed for compliance with a specific CoreConnect
 implementation.
 Important CoreConnect implementations include: 
\layout Itemize

IBM Blue Logic
\begin_inset Formula $^{\textrm{TM}}$
\end_inset 

 Core library for ASIC SoC design.
\layout Itemize

Xilinx OPB for FPGA SoC design.
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:CoreConnect-based-SoC}

\end_inset 

CoreConnect based SoC
\layout Standard
\align center 

\begin_inset Graphics FormatVersion 1
	filename images/coreconnect_system.eps
	display default
	size_type 1
	width 100text%
	keepAspectRatio
	rotateOrigin leftBaseline
	lyxsize_type 0

\end_inset 


\newline 
(from 
\begin_inset LatexCommand \cite{CoreConnect_WhitePaper}

\end_inset 

 page 1)
\end_inset 


\layout Subsection


\begin_inset LatexCommand \label{sec:On-Chip-Peripheral-Bus}

\end_inset 

On-Chip Peripheral Bus (OPB)
\layout Standard

The IBM CoreConnect On-Chip Peripheral Bus
\begin_inset Foot
collapsed true

\layout Standard

Referred to as 
\begin_inset Quotes eld
\end_inset 

OPB
\begin_inset Quotes erd
\end_inset 

 or 
\begin_inset Quotes eld
\end_inset 

OPB Bus
\begin_inset Quotes erd
\end_inset 

 in this paper.
\end_inset 

 is an easy to use bus.
 OPB allows an arbitrary number of masters to read from / write to an arbitrary
 number of slaves.
 Figure 
\begin_inset LatexCommand \ref{cap:IBM-CoreConnect-OPB-Physical-Implementation}

\end_inset 

 shows a small IBM CoreConnect OPB System.
\layout Standard

The bus includes a data bus and an address bus.
 A typical OPB device use the most significant bits of the address bus to
 determine weather it was selected or not, and the least significant bits
 to determine which register (internal address) was accessed.
 
\layout Standard

A normal OPB access can be performed in one cycle.
 Slow OPB devices may respond in an arbitrary number of cycles if issuing
 a 
\begin_inset Quotes eld
\end_inset 

Timeout Suppress
\begin_inset Quotes erd
\end_inset 

 signal.
\layout Standard

When several OPB masters share a bus, an OPB Arbiter is used to grant exclusive
 bus access.
 In these systems, a master may have to wait an arbitrary number of cycles
 until the bus is idle.
 The OPB Arbiter itself may also introduce a short mandatory delay before
 it grant access.
 An OPB master may utilize 
\begin_inset Quotes eld
\end_inset 

Bus Lock
\begin_inset Quotes erd
\end_inset 

 (also referred to as sequential access or bursts) to make several slave
 accesses per arbitrated bus grant.
 Utilization of sequential access keeps arbitration overhead to a minimum.
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:IBM-CoreConnect-OPB-Physical-Implementation}

\end_inset 

IBM CoreConnect OPB Physical Implementation
\layout Standard
\align center 

\begin_inset Graphics FormatVersion 1
	filename images/IBM_OPB_Physical_implementation.eps
	display default
	size_type 1
	width 90text%
	keepAspectRatio
	rotateOrigin leftBaseline
	lyxsize_type 0

\end_inset 


\newline 
(from 
\begin_inset LatexCommand \cite{CoreConnect_WhitePaper}

\end_inset 

 page 6)
\end_inset 


\layout Subsection


\begin_inset LatexCommand \label{sub:Xilinx-OPB}

\end_inset 

Xilinx OPB
\layout Standard

Xilinx implements the IBM CoreConnect On-Chip Peripheral Bus with most configura
ble OPB parameters set to specific values.
 Important parameters include 32-bit data bus and 32-bit address bus.
 Xilinx OPB Arbiter supports up to 16 masters and allow slow slaves to respond
 in up to 16 cycles without issuing a 
\begin_inset Quotes eld
\end_inset 

Timeout supppress
\begin_inset Quotes erd
\end_inset 

 signal.
 
\layout Standard

Figure 
\begin_inset LatexCommand \ref{cap:Xilinx-OPB-physical}

\end_inset 

 shows a small Xilinx OPB system.
 It is important to note that Xilinx OPB is based upon OR-gates and does
 not implement 
\begin_inset Quotes eld
\end_inset 

enable
\begin_inset Quotes erd
\end_inset 

-outputs
\begin_inset Foot
collapsed true

\layout Standard

Xilinx OPB requires that all slave/master peripherals set all output signals
 to logic zero when not selected.
\end_inset 

.
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:Xilinx-OPB-physical}

\end_inset 

Xilinx OPB physical implementation
\layout Standard
\align center 

\begin_inset Graphics FormatVersion 1
	filename images/xilinx_opb_physical_implementation.eps
	display default
	size_type 1
	width 90text%
	keepAspectRatio
	rotateOrigin leftBaseline
	lyxsize_type 0

\end_inset 


\newline 
(from 
\begin_inset LatexCommand \cite{MB_OPB_TUTORIAL}

\end_inset 

 page 3)
\end_inset 


\layout Standard

This definition of OPB parameters makes all Xilinx OPB devices compatible.
 Xilinx compatible OPB devices include Xilinx MicroBlaze softcore processor,
 Xilinx PicoBlaze softcore processor and a large set of OPB peripherals.
 Xilinx also provides bridge which allows the IBM PPC 440 processor core
 built into recent Xilinx Virtex II Pro FPGAs to be interconnected with
 the OPB devices.
\layout Standard

Xilinx provide 
\begin_inset Quotes eld
\end_inset 

OPB Usage Notes
\begin_inset Quotes erd
\end_inset 

 
\begin_inset LatexCommand \cite{MB_HWREF}

\end_inset 

 for mixed systems where Xilinx OPB and other OPB implementations connected.
 With aid of these usage notes, a broad range of none-Xilinx OPB devices
 may be interconnected given some work.
\layout Section

About Ethernet 10/100 MBit/s
\layout Standard

Ethernet
\begin_inset Foot
collapsed false

\layout Standard

Any reference to 
\begin_inset Quotes eld
\end_inset 

Ethernet
\begin_inset Quotes erd
\end_inset 

 in this paper refers to the 10/100 MBit/s Ethernet standards.
 Gigabit Ethernet, 10 Gigabit Ehernet, Experimental Ethernet and other none
 10/100 MBit/s versions of Ethernet are not in the scope of this paper.
\end_inset 

 
\begin_inset LatexCommand \cite{Book-Gigabit-Ethernet}

\end_inset 

 is a network link (OSI layer 2) protocol.
 Ethernet is by far the most common layer 2 protocol for LANs (Local Area
 Networks).
 An Ethernet Packet (figure 
\begin_inset LatexCommand \prettyref{cap:Ethernet-Packet-Format}

\end_inset 

) includes a 14 byte header (DA, SA, TYPE) and a 46 to 1500 byte DATA section
\begin_inset Foot
collapsed false

\layout Standard

Short packets must be padded with unused 
\begin_inset Quotes eld
\end_inset 

padding
\begin_inset Quotes erd
\end_inset 

 bytes.
 The value of the padding is arbitrary, often the value 0x00 is used.
 More humorous paddings such as 0xBADDCAFE and 0xDEADBEEF are also in use.
\end_inset 

.
 In a typical implementation, hardware manages access control, synchronization
 (PREAMBLE, SYNC) and error detection (FCS).
 
\layout Subsection

10 MBit/s, 100 MBit/s or Auto Negotiation
\layout Standard

Today 10 MBit/s Ethernet devices are still available for sale, but the faster
 100 MBit/s Ethernet is by far more common.
 However, many old devices are 10 MBit/s only.
 Most 100 MBit/s devices will Auto Negotiate to 100 MBit/s unless negotiating
 with a 10 MBit/s device.
 Most (if not all) 100 MBit/s Ethernet devices support 10/100 MBit/s Auto
 Negotiation.
\layout Subsection

Full Duplex, Half Duplex, and Auto negotiation
\layout Standard

An Ethernet device is either operating in Full Duplex or Half Duplex mode.
 Most Ethernet devices can be configured to Auto Negotiate duplex or to
 use a statically selected duplex mode.
 If possible, hosts will negotiate to Full Duplex.
\layout Subsubsection

Half Duplex
\layout Standard

In Half Duplex, an arbitrary number of Ethernet devices share a single Ethernet
 medium, using the CSMA/CD access protocol.
 Half Duplex is an inefficient and antique Ethernet mode, although still
 in use in a decreasing number of legacy networks.
\layout Subsubsection

Full Duplex
\layout Standard

In full duplex mode each Ethernet device has a dedicated send medium and
 a dedicated receive medium.
 Interconnections are handled by network switches.
 A special Ethernet PAUSE frame is used to notify a sender that a Ethernet
 device is congested and may not receive more packets for a period of time.
 Pending on network design and switch capacity allows much more throughput
 than half duplex, as several parallel mediums may be utilized concurrently
 instead of a single shared medium.
\layout Subsection

Ethernet destinations and promiscuous mode
\layout Standard

Hardware may or may not verify destination address (DA).
 Packets can be based in three classes based upon destination address:
\layout Itemize

Broadcast packets; sent to all hosts
\layout Itemize

Multicast packets; sent to a group of hosts
\layout Itemize

Unicast packets; sent to a specific host
\layout Standard

As an endhost, a packet is considered to be a stray if it is 
\layout Itemize

a multicast packet sent to a group which the host does not participate in
\layout Itemize

a unicast packet sent to an other host (than the receiver)
\layout Standard

Stray packets are common in Ethernet.
 Switches in full duplex networks will broadcast multicast/unicast packets
 if it does not know where it should forward them
\begin_inset Foot
collapsed false

\layout Standard

This can be compared to a postman who has received mail for which the recipient'
s address is unknown.
 Instead of discarding the mail, the postman gives a copy of the mail to
 everyone he can find in hope that the someone else will be able to deliver
 the mail.
\end_inset 

.
 Therefor switches will generate stray packets in full duplex Ethernets.
 In half duplex, everyone receives everything.
 Each packet sent will reach the receiver host, but all other hosts will
 receive a stray copy.
\layout Standard

Many end host Ethernet devices drop stray packets instead of passing them
 to software.
 To do the opposite, to not drop stray packets is commonly referred to as
 
\begin_inset Quotes eld
\end_inset 

promiscuous mode
\begin_inset Quotes erd
\end_inset 

.
 Several end host devices can enable/disable promiscuous mode by software.
 Interconnect devices such as network switches, can be considered to always
 operate in promiscuous mode.
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:Ethernet-Packet-Format}

\end_inset 

Ethernet Packet Format
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="3" columns="7">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

PREAMBLE
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SYNCH
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

DA
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SA
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

TYPE
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

DATA
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

FCS
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

62
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

2
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

6
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

6
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

2
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

46-1500
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

4
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

bits
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

bits
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

bytes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

bytes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

bytes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

bytes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

bytes
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Subsection


\begin_inset LatexCommand \label{sub:MAU-PHY}

\end_inset 

Physical Layer Device (PHY)
\layout Standard

Ethernet can be used in several different mediums, typically coaxial cables,
 optical fibers and twisted pair cables.
 To simplify development, a PHY
\begin_inset Foot
collapsed false

\layout Standard

Physical Layer Device (PHY) is used in Ethernet 10/100 MBit/s references.
 Medium Attachment Unit (MAU) used in Ethernet 10-only MBit/s references.
 In this paper, the term PHY is loosely used in reference to both MAU and
 PHY.
\end_inset 

 handle the OSI Layer 2 (Link/MAC) 
\begin_inset Formula $\Leftrightarrow $
\end_inset 

 OSI Layer 1 (Physical) interface.
 An PHY is a transceiver which may be able to Auto Negotiate between different
 Ethernet standards.
 There are a number of different PHY protocols, which defines how the PHY
 pins should be used.
 Since PHYs conform to standards an Ethernet device does not need to be
 aware of what kind of physical medium it will be implemented in.
 An Ethernet device is also portable to all compatible PHYs, making it manufactu
rer independent.
\layout Standard

There are three common PHYs: AUI, MII and RMII.
 Each of them have their own characteristics (as shown in table 
\begin_inset LatexCommand \prettyref{cap:MAU-PHY}

\end_inset 

).
 
\layout Standard

AUI is an old 10 MBit/s interface only.
 
\layout Standard

MII was defined as the 10/100 MBit/s Ethernet was introduced.
 An MII design goal appears to provide a high level of parallelism (data
 width), offering 100 MBit/s at a 25 MHz interface clock.
 
\layout Standard

Reduced-MII (RMII) was invented to reduce interface pin count
\begin_inset Foot
collapsed true

\layout Standard

the number of chip pins utilized.
\end_inset 

.
 A high pin count raises production costs and power dissipation.
 Reducing pin count is a major design concern in switches and other multi-interf
ace ASIC/FPGA designs.
 RMII provides 100 MBit/s at a 50 MHz interface clock.
\layout Standard


\begin_inset Float table
wide false
collapsed true

\layout Caption


\begin_inset LatexCommand \label{cap:MAU-PHY}

\end_inset 

Common MAU and PHY protocols
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="4" columns="4">
<features>
<column alignment="left" valignment="top" leftline="true" width="5cm">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

MAU / PHY protocol
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Pins/Interface
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Width
\end_inset 
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

MBit/s
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Attachment Unit Interface (AUI)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

6 pins
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1 bit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

10
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Medium Independent Interface (MII)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

16 pins
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

 4 bit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

10/100
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Reduced Medium Independent Interface (RMII)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

8 pins
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

2 bit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

10/100
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Chapter


\begin_inset LatexCommand \label{cha:Xilinx-MicroBlaze}

\end_inset 

Xilinx MicroBlaze
\layout Section

The Xilinx MicroBlaze core
\layout Standard

Xilinx MicroBlaze is a small processor core geared for embedded applications
 implemented in Xilinx FPGAs.
 A MicroBlaze platform consists of one or several MicroBlaze cores, interconnect
ed with a set of peripherals through a bus architecture.
\layout Standard

The MicroBlaze core is a high performance 32-bit RISC Soft Processor and
 among the fastest available to Xilinx FPGAs.
 The MicroBlaze instruction set is familiar to MIPS and other common RISC
 processors.
 
\layout Standard

The core consists of a three stage pipeline with a Harvard-style dedicated
 instruction and data paths.
 The core is illustrated in figure 
\begin_inset LatexCommand \ref{cap:MicroBlaze-Core-Block-Diagram}

\end_inset 

.
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:MicroBlaze-Core-Block-Diagram}

\end_inset 

MicroBlaze Core Block Diagram
\layout Standard
\align center 

\begin_inset Graphics FormatVersion 1
	filename images/microblaze_core_block_diagram.eps
	display default
	size_type 1
	width 90text%
	keepAspectRatio
	rotateOrigin leftBaseline
	lyxsize_type 0

\end_inset 


\newline 
(from 
\begin_inset LatexCommand \cite{MB_HWREF}

\end_inset 

 page 3)
\end_inset 


\layout Subsection

Xilinx MicroBlaze bus interfaces
\layout Standard

The MicroBlaze core contains two OPB master interfaces, IOPB which provides
 an instruction path and DOPB which provides a data path.
 The core also contains two Local Memory Buses (LMB) interfaces, ILMB which
 provide an instruction path and DLMB which provides a data path.
 
\layout Standard

A MicroBlaze platform must include a data path and an instruction path to
 the MicroBlaze core, therefor it will utilize 2, 3 or 4 busses.
\layout Subsubsection

Local Memory Bus (LMB)
\layout Standard

The LMB bus is a highly optimized architecture, exploiting the Xilinx Dual
 Port Block RAM support for dual single-cycle memory access.
 This enables concurrent ILMB and DLMB access.
 A MicroBlaze platform with only LMB access is extremely efficient.
 
\layout Subsubsection


\begin_inset LatexCommand \label{sub:Microblaze-OPBs}

\end_inset 

On-Chip Peripheral Bus (OPB)
\layout Standard

Xilinx MicroBlaze is compatible with several other OPB devices, as stated
 in subsection 
\begin_inset LatexCommand \ref{sub:Xilinx-OPB}

\end_inset 

.
 MicroBlaze's use of a dedicated data path (DOPB) and a dedicated instruction
 path (IOPB) allows several different bus configurations.
 The MicroBlaze platform may be configured to utilize the MicroBlaze architectur
e in a manner optimized for the application.
 
\layout Standard

Examples of customized bus configurations are:
\layout Itemize

Dual Port RAM configuration (figure 
\begin_inset LatexCommand \ref{cap:MicroBlaze-OPB-Configuration-DP-RAM}

\end_inset 

).
 IOPB and DOPB both interface a single Dual Port RAM, to provide a shared,
 high speed instruction / data memory space.
 IOPB and DOPB may act concurrently and independently.
 This is similar to the LMB architecture which also utilize a Dual Port
 RAM.
 The downside is that Dual Port RAMs tend to be more expensive than single
 port RAM and utilize more I/O pins.
\layout Itemize

DOPB to IOPB Bridge configuration (figure 
\begin_inset LatexCommand \ref{cap:MicroBlaze-OPB-Configuration-OPB-Bridge}

\end_inset 

).
 IOPB and DOPB is bridged, and the bridge will act as a DOPB slave and a
 IOPB master.The bridge allows IOPB and DOPB to act concurrently and independentl
y except when DOPB access IOPB memory.
 This is less expensive than a Dual Port RAM while as almost as fast in
 applications which does not read/write to memory often.
 
\layout Itemize

IOPB ROM configuration (figure 
\begin_inset LatexCommand \ref{cap:MicroBlaze-OPB-Configuration-ROM}

\end_inset 

).
 This configuration utilize that many application never need to rewrite
 instruction memory, and thus may store it in a Read-Only Memory (ROM).
 IOPB and DOPB may act concurrently independently.
\layout Itemize

IOPB and DOPB interconnect configuration (figure 
\begin_inset LatexCommand \ref{cap:MicroBlaze-OPB-Configuration-connected}

\end_inset 

).
 This is a low speed configuration.
 DOPB and IOPB are connected to the same bus, and they may not operate concurren
tly.
 It is a simple, slow and cheap solution.
 
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:MicroBlaze-OPB-Configuration-DP-RAM}

\end_inset 

MicroBlaze OPB Configuration - Dual Port RAM
\layout Standard
\align center 

\begin_inset Graphics FormatVersion 1
	filename images/microblaze_config_dpram.eps
	display default
	size_type 1
	width 75text%
	scale 25
	keepAspectRatio
	rotateOrigin leftBaseline
	lyxsize_type 0

\end_inset 


\end_inset 


\begin_inset Float figure
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:MicroBlaze-OPB-Configuration-OPB-Bridge}

\end_inset 

MicroBlaze OPB Configuration - OPB Bridge
\layout Standard
\align center 

\begin_inset Graphics FormatVersion 1
	filename images/microblaze_config_bridge.eps
	display default
	size_type 1
	width 75text%
	scale 25
	rotateOrigin leftBaseline
	lyxsize_type 0

\end_inset 


\end_inset 


\begin_inset Float figure
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:MicroBlaze-OPB-Configuration-ROM}

\end_inset 

MicroBlaze OPB Configuration - ROM
\layout Standard
\align center 

\begin_inset Graphics FormatVersion 1
	filename images/microblaze_config_rom.eps
	display default
	size_type 1
	width 75text%
	scale 25
	rotateOrigin leftBaseline
	lyxsize_type 0

\end_inset 


\end_inset 


\begin_inset Float figure
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:MicroBlaze-OPB-Configuration-connected}

\end_inset 

MicroBlaze OPB Configuration - IOPB & DOPB interconnected
\layout Standard
\align center 

\begin_inset Graphics FormatVersion 1
	filename images/microblaze_config_connected.eps
	display default
	size_type 1
	width 75text%
	scale 25
	rotateOrigin leftBaseline
	lyxsize_type 0

\end_inset 


\end_inset 


\layout Subsubsection

Memory considerations
\layout Standard

Many FPGAs contain only a few kilobytes of Block RAM.
 An expensive FPGA (such as a Virtex-II Pro XC2VP125) may contain more than
 a megabyte of Block RAM.
 
\layout Standard

Applications with large buffers requirements such as network switches or
 routers fits badly even in expensive FPGA.
\layout Standard

LMB-only memory solutions is therefor suited only for a limited range of
 applications.
 Many applications require external memory, accessed through the OPB bus.
\layout Section

Embedded Development Kit (EDK)
\layout Standard

Xilinx main development kit for embedded applications and SoCs is the Embedded
 Development Kit (EDK).
 It contains a large set of OPB peripherals, Xilinx MicroBlaze soft processor,
 Xilinx PicoBlaze soft processor and a powerful up to date development kit.
\layout Section

MicroBlaze Development Kit (MDK)
\layout Standard

MDK is a stripped down version of EDK and contains less peripherals.
 The software in MDK is based upon an old version of EDK.
\layout Subsection

MicroBlaze peripherals included in MDK
\layout Standard

MDK includes ten standard OPB peripherals, such as Memory Controller, UART,
 Watchdog, JTAG_UART, and Interrupt controller.
 One of the peripherals is an OPB Arbitrator which allows up to 16 masters
 to share the OPB Bus.
 Xilinx also provides documentation and tutorials on the subject of designing
 custom OPB Slaves for MicroBlaze platforms.
\layout Subsection

MDK platform tailoring utilities
\layout Standard

A MicroBlaze platform is specified in a MicroBlaze Hardware Specification
 (MHS) configuration file.
 Typical MHS options include which bus configuration to use and which peripheral
s to interface.
 
\layout Standard

A Platform tailoring utility named Platform Generator (usually referred
 to by the acronym 
\begin_inset Quotes eld
\end_inset 

platgen
\begin_inset Quotes erd
\end_inset 

) build platforms through an automated process.
 The process includes creating top modules and launching project synthesis.
 Platgen is configured through the MHS file and a small set of command line
 parameters.
 
\layout Standard

MDK platgen is moderately simple and able to cope with most MDK beginners
 design issues.
\layout Subsection

MDK software development tools
\layout Standard

MDK includes most common development tools, such as an assembler, a compiler,
 a linker, a debugger and some other utilities.
 All these tools are based on famous and well verified GNU tools.
 This is a major benefit as many developers have previous experience with
 these or similar tools
\begin_inset Foot
collapsed false

\layout Standard

Several GNU tools, such as the C compiler, behaves similar to common UNIX
 tools.
\end_inset 

.
\layout Standard

The debugger is interfaced by JTAG or RS232.
 Any debugger familiar with either the GDB Remote Protocol or the Unified
 Debugging Interface standard may be used to debug MicroBlaze platforms.
 This allows a broad range of debuggers and debugger GUIs to be used with
 a MicroBlaze platform.
\layout Standard

MicroBlaze software utilize a small set of standard libraries (libc, libm
 etc) and driver directories which contain .c and .h files.
 The build of a MicroBlaze software system is performed by a PERL-script,
 libgen.
 Libgen reads a MicroBlaze Software Specification (MSS) configuration file.
 When executed, libgen compiles all drivers configured to be used and add
 the compiled drivers to the libc library.
 The .h files from the drivers are copied to the projects include path.
 Finally libgen creates mbio.h, a C-header with macros to each base address
 of any peripheral used in the MicroBlaze project.
\layout Standard

The project source code is compiled and linked with access to all associated
 .h files and the modified libc library.
\layout Subsection

Problems with MDK
\layout Standard

There are several problems with MDK which are easily encountered.
 Lack of in depth documentation, bugs and limitations in the MDK platform
 tailoring utility are the greatest problems.
\layout Subsubsection

MDK Documentation
\layout Standard

The documentation 
\begin_inset LatexCommand \cite{MB_HWREF,MB_SWREF,MB_TUTORIAL,MB_OPB_TUTORIAL}

\end_inset 

 included in MDK is fine for beginner applications but in depth information
 is hard to find.
 
\layout Standard

It is difficult to find more information about MDK.
 Most searches at Xilinx (or common Internet search engines such as Google
 or Altavista) usually return information about EDK.
 
\layout Subsubsection

MDK platform tailoring limitations - OPB bus configuration
\layout Standard

MDK can be configured to use no OPB bus, an instruction bus (IOPB), a data
 bus (DOPB) or both OPB busses.
 MicroBlaze may utilize IOPB and DOPB in several different ways, allowing
 application specific customization as described in section 
\begin_inset LatexCommand \ref{sub:Microblaze-OPBs}

\end_inset 

.
\layout Standard

However, MDK only allow the designer to specify which OPB/LMB interfaces
 to implement.
 MDK does not offer any configuration options for controlling if - or how
 - busses should be interconnected.
 
\layout Standard

If both DOPB and IOPB is used, they will be connected to the same bus (shown
 in figure 
\begin_inset LatexCommand \ref{cap:MicroBlaze-OPB-Configuration-connected}

\end_inset 

).
 When executing software on IOPB the shared bus will be highly utilized,
 bus delays will increase and data throughput will dramatically decrease.
 Shared bus has a significant negative performance impact.
\layout Standard

Additionally, MDK does not include any OPB-to-OPB Bridge.
\layout Standard

EDK offers a number of measures to remedy these problems through a set of
 MHS directives which are not available in MDK.
 To customize OPB in MDK, a designer must venture beyond platgen and modify
 automatically generated VHDL files.
 This means that when making advanced MDK designs, a designer loose a lot
 of time and effort saving automation.
\layout Standard

This was discussed in 
\begin_inset LatexCommand \cite{XEPF-Platgen-OPB-Limitation}

\end_inset 

 and Xilinx staff replied that it would be fixed before the end of summer
 2002.
 It appears that Xilinx instead chose to discontinue MDK updates and put
 their efforts into EDK.
\layout Subsubsection

MDK platform tailoring limitations - buffers and pads configuration
\layout Standard

A Virtex FPGA input/output pin is connected to a 
\begin_inset Quotes eld
\end_inset 

pad
\begin_inset Quotes erd
\end_inset 

.
 Each Virtex FPGA contains four global clock pads.
 These pads are specifically used for clock signals.
 Each pad is in turn connected to a buffer.
 The buffer-pad combination decides how a pin may be interfaced by the design.
 There are a number of different buffers which each has it's own purpose
 and characteristics.
 
\layout Standard

MDK platgen can be configured weather to insert buffers or not.
 MDK platgen will auto-insert buffers as stated in table 
\begin_inset LatexCommand \ref{cap:Auto-inserted-buffers}

\end_inset 

.
 This is the common buffers which are usually what the design requires.
\layout Standard

When configured to not insert buffers, MDK platgen will generate a black
 box.
 Black boxes may be utilized as components in a larger design.
 A black box may also to be used in a small wrapper which defines buffer
 should be used for each I/O signal.
\layout Standard

There are cases when the design require specific buffers.
 An example of this is when a designer wish to implement a synchronous Ethernet
 peripheral on a prototype board with RX_CLK, TX_CLK or REF_CLK connected
 to a global clock pad.
 Then the designer must use the not so common buffer type 
\begin_inset Quotes eld
\end_inset 

IBUFG
\begin_inset Quotes erd
\end_inset 

, because the common 
\begin_inset Quotes eld
\end_inset 

IBUF
\begin_inset Quotes erd
\end_inset 

 buffer cannot be connected to a global clock pad.
 
\layout Standard


\begin_inset Float table
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:Auto-inserted-buffers}

\end_inset 

MDK synthesis auto-inserted buffers
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Buffer
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Inserted at I/O signals used as
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

BUFGP
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Clock signals
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

IBUF
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

General input
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OBUF
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

General output
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

IOBUF
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Tristate input/output
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Subsubsection

MDK platform tailoring limitations - Tristate design style
\layout Standard

Another issue is that tristate buffers in peripherals must be written as
 a set of three I/O signals (input, output and tristate control).
 Although this is not a major drawback when designing custom components,
 it is an unnecessary design restriction.
 Specifically it may limit which third party OPB components (distributed
 as netlists or source code) which are easy to utilize in a MicroBlaze periphera
l design.
\layout Chapter


\begin_inset LatexCommand \label{cha:Xilinx-MicroBlaze-as-a-Network-SoC}

\end_inset 

Xilinx MicroBlaze as a Network SoC
\layout Section

MicroBlaze as a SoC system
\layout Standard

The MicroBlaze Development Kit is geared at developing System on Chip solutions.
 All standard peripherals are implemented in the same chip (FPGA) as the
 MicroBlaze core.
 It also contains typical I/O interfaces for microcontrollers and SoCs,
 such as: serial (RS232), memory (SRAM/FlashRAM) and General Purpose I/O.
\layout Section

MicroBlaze Network Support
\layout Standard

MicroBlaze does not include any network device.
 This is obviously a major drawback when designing network SoCs.
 However there are two MicroBlaze compatible OPB Ethernet peripherals available
 for sale at Xilinx.
 One of these is a small, simple Ethernet MAC.
 The other is a professional Ethernet MAC which is highly configurable and
 support most Ethernet modes.
 In a commercial SoC project, buying either of these MACs is simple way
 to get a well verified peripheral.
\layout Subsection

Customized Ethernet peripheral
\layout Standard

However, custom design of an Ethernet peripheral may be preferred.
 A custom made peripheral yields a number of interesting properties:
\layout Itemize

Cheap
\layout Itemize

May be customized for a specific application.
\layout Standard

The level of application specific customization is of interest in a large
 number of projects.
 A few examples of interesting customizations are:
\layout Itemize

Speed or area optimized design
\layout Itemize

DMA or register access
\layout Itemize

Promiscuous mode or not
\layout Itemize

Hardware support for Ethernet multicast
\layout Itemize

Classification, validation, or special handling of certain Ethernet frames
\layout Standard

Classification, validation, and special handling of certain Ethernet frames
 is performed by most Ethernet peripherals, as it is a requirement for IEEE
 Ethernet standard compliance
\begin_inset Foot
collapsed false

\layout Standard

It may also be performed in software.
\end_inset 

.
 A typical Ethernet peripheral will verify Ethernet frames and take special
 actions upon receipt of Ethernet PAUSE frames.
 It would not be difficult to extend such a classification module to also
 handle layer 3 frames (such as IPv4) to reduce MicroBlaze CPU utilization.
 By lowering CPU utilization the software application may be simplified
 or power dissipation reduced.
\layout Chapter


\begin_inset LatexCommand \label{cha:Development-of-Microblaze-ethernet-peripherals}

\end_inset 

Development of MicroBlaze Ethernet peripherals
\layout Section

Design requirements and limitations
\layout Subsection

Full Duplex only
\layout Standard

In principal, supporting the entire range of Full/Half/Auto Duplex combinations
 is easy, but it takes time and effort to develop and verify.
 For simplicity, all Ethernet peripherals were developed for Full Duplex
 only, which is by far the most common Ethernet Duplex mode today.
\layout Subsection

Ethernet Interfaces (PHY): MII and RMII
\layout Standard

The Ethernet devices were designed to be used on two different prototype
 boards, one which was based on an MII Ethernet Interface, one which was
 based on a Reduced MII (RMII) Ethernet Interface.
 Therefore, the designs needed to be capable to manage both interfaces.
\layout Section

Implementation
\layout Subsection

Eth Version 1.00, Revision A
\layout Standard

Eth Version 1.00 Revision A is designed to be a very simple MAC, portable
 to most FPGA and prototype boards.
\layout Subsubsection

Fully synchronous, single edge triggered
\layout Standard

To simplify design and verification, no asynchronous logic is used in the
 design.
 Additionally, only flip flops triggered upon system clock rising edge are
 used.
 Figure 
\begin_inset LatexCommand \ref{cap:EthV100A-InputToOutput-illustration}

\end_inset 

 illustrates how an input clock rising edge (a 
\begin_inset Quotes eld
\end_inset 

001
\begin_inset Quotes erd
\end_inset 

 pattern) is detected and output is triggered upon rising edge.
\layout Standard


\begin_inset Float figure
wide false
collapsed true

\layout Caption


\begin_inset LatexCommand \label{cap:EthV100A-InputToOutput-illustration}

\end_inset 

Eth Version 1.00 Revision A, Input to Output illustration
\layout Standard
\align center 

\begin_inset Graphics FormatVersion 1
	filename images/ethv100a_txclocking.eps
	display default
	size_type 1
	width 90text%
	keepAspectRatio
	rotateOrigin leftBaseline
	lyxsize_type 0

\end_inset 


\end_inset 


\layout Standard

It should be noted that due to this design choice, Ethernet Interface clocks
 must be sampled fast enough to detect rising edge and change values prior
 to falling edge.
 Thus, system clock must be approximately 5 times faster than Ethernet interface
 clocks.
 Table 
\begin_inset LatexCommand \prettyref{cap:Min-SysClk}

\end_inset 

 shows the interface clocks and resulting minimal system clock frequency.
\layout Standard


\begin_inset Float table
wide false
collapsed true

\layout Caption


\begin_inset LatexCommand \label{cap:Min-SysClk}

\end_inset 

Minimum System Clock for reliable synchronous Ethernet sampling
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Interface
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Interface Clock
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Minimum System Clock
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

MII 10 MBit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

2.5 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

12.5 MHz
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

MII 100 MBit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

25 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

125 MHz
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RMII 10 MBit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

5 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

25 MHz
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RMII 100 MBit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

50 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

250 MHz
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Paragraph

Why synchronous and single edge triggered flipflops?
\layout Standard

Asynchronous logic and systems triggered both edges are harder to verify.
 Asynchronous logic in Xilinx Virtex FPGA implementations require a global
 clock net dedicated to the Ethernet clocks.
 Therefore asynchronous solution requirements upon the design of target
 prototype board and consume scarce
\begin_inset Foot
collapsed true

\layout Standard

Several Virtex FPGAs only have 4 global clock pads.
\end_inset 

 global clock pads.
\layout Subsubsection

System Clock and Performance Impact
\layout Standard

Eth Version 1.00 Revision A, the OPB bus and the MicroBlaze core was included
 in a MicroBlaze platform.
 The platform was synthesized and implemented for a Virtex 800 speedgrade
 4 FPGA.
 
\layout Standard

Maximum system frequency for the platform proved to be 50 - 60 MHz
\begin_inset Foot
collapsed false

\layout Standard

Utilizing a Place And Route overall effort of 5.
\end_inset 

.
 As shown in table 
\begin_inset LatexCommand \prettyref{cap:Min-SysClk}

\end_inset 

, this only enables 10 MBit/s implementations.
\layout Standard

Eth Version 1.00 Revision bus is operating at 50 MHz, 32-bit datawidth and
 two cycle access times.
 This yields a maximum switching capacity of 
\layout Standard
\align center 

\begin_inset Formula $\frac{32\, \textrm{bit}\, *50\, \textrm{M}\, \textrm{cycles/s}}{2\, \textrm{cycles}}=800\, \textrm{MBit/s}$
\end_inset 

.
\layout Standard

This should be enough for a very large number of 10 MBit/s devices.
 
\layout Subsubsection

Modular design
\layout Standard

To provide a simple, extendible and reusable interface, each component is
 designed with modularity and re-usability in mind.
 
\layout Standard

All receive-logic is placed in an RX core (figure 
\begin_inset LatexCommand \prettyref{cap:RX-Core}

\end_inset 

), and all send-logic in an TX core (figure 
\begin_inset LatexCommand \prettyref{cap:TX-Core}

\end_inset 

).
 The cores are mapped into a small top-module which handles bus interconnections.
 As shown in table 
\begin_inset LatexCommand \prettyref{cap:EthModules}

\end_inset 

, all parts of the design have successfully been kept at a small number
 of short and easily read VHDL files.
\layout Standard


\begin_inset Float table
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:EthModules}

\end_inset 

Eth Version 1.00 Revision A VHDL files
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Modules
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

VHDL Files/Entities
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Average number of lines per file
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

General
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

4
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

93
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RX Core
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

7
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

112
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

TX Core
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

6
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

133
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OPB Slave
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

250
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Subsection

Eth Version 1.00 Revision C
\layout Standard

This is a redesign of Eth V.100 Revision A.
 It is designed to reach 100 MBit at target technology MII, Virtex 800 speedgrad
e -4 with system clock set to 50 MHz.
\layout Subsubsection

Asynchronous
\layout Standard

The asynchronous solution clock most of the design upon Ethernet PHY clock
 which is significantly slower than the 50 MHz system clock.
 Only the register files and the top module is clocked upon system clock.
 
\layout Paragraph

Open Loop and minimum system clock frequency.
\layout Standard

The design utilize an open loop 
\begin_inset LatexCommand \cite{XTE-Asynchronous}

\end_inset 

 to move from Ethernet clock domains to system clock domain.
 The open loop requires system clock to always be faster than interface
 clocks.
 Utilizing the variables in table 
\begin_inset LatexCommand \ref{cap:Open-Loop-MinSysClk}

\end_inset 

 the timing requirements may be expressed as:
\layout Standard
\align center 

\begin_inset Formula $t_{sysclk}\, +\, \left|d_{sysclk}\right|\, \leq \, t_{phyclk}\, -\, \left|d_{phyclk}\right|$
\end_inset 


\layout Standard

This formula may be rewritten as:
\layout Standard
\align center 

\begin_inset Formula $f_{sysclk}\, \geq \, \frac{1}{t_{phyclk}\, -\, \left|d_{phyclk}\right|\, -\, \left|d_{sysclk}\right|}$
\end_inset 


\layout Standard

A clock drift worst case of 
\begin_inset Formula $\pm 19\%$
\end_inset 

 
\begin_inset Foot
collapsed true

\layout Standard

A simulation testbench for verification of academic Ethernet peripherals
 (supplied by Robert Wikander of Switchcore AB) have a 
\begin_inset Formula $\frac{\left|d_{phyclk}\right|}{t_{phyclk}}<19\%$
\end_inset 

 worst case clock drift.
 The testbench simulate interface clock drift but assume system clock drift
 to be zero.
\end_inset 

 yields that system clock must be 23% faster than interface clock.
\layout Standard

Figure 
\begin_inset LatexCommand \ref{cap:Open-Loop-Race-Condition}

\end_inset 

 illustrates the race condition which eventually will occure if the timing
 requirements requirement is not met; the system clock domain fails to sample
 valid data.
\layout Standard


\begin_inset Float table
wide false
collapsed true

\layout Caption


\begin_inset LatexCommand \label{cap:Open-Loop-MinSysClk}

\end_inset 

Open Loop - Minimum system clock frequency
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="6" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Variable
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Denotes
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $f_{sysclk}$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

System clock frequency 
\begin_inset Formula $\left(Hz\right)$
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $t_{phyclk}$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Ethernet PHY clock period 
\begin_inset Formula $\left(s\right)$
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $t_{sysclk}$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

System clock period 
\begin_inset Formula $(s)$
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $d_{phyclk}$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Ethernet PHY clock drift, worst case 
\begin_inset Formula $\left(s\right)$
\end_inset 


\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $d_{sysdrift}$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

System clock drift, worst case 
\begin_inset Formula $\left(s\right)$
\end_inset 


\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:Open-Loop-Race-Condition}

\end_inset 

Open Loop Race Condition
\layout Standard
\align center 

\begin_inset Graphics FormatVersion 1
	filename images/openloop_worstcase.eps
	display default
	size_type 1
	width 90text%
	keepAspectRatio
	rotateOrigin leftBaseline
	lyxsize_type 0

\end_inset 


\end_inset 


\layout Section

Verification
\layout Subsection

Testbench
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Caption

Modular Testbench
\layout Standard
\align center 

\begin_inset Graphics FormatVersion 1
	filename images/testbench1.eps
	display default
	size_type 2
	scale 50
	rotateOrigin leftBaseline
	lyxsize_type 0

\end_inset 


\end_inset 


\layout Subsubsection

Regression tests
\layout Standard

Testbenches are written to be highly automated and generate logfiles of
 assert notes, warnings and errors.
 Therefore, human inspection of waveforms are rarely needed to verify that
 recently added code does not break previous functionality.
 Regression tests proved to be a highly useful tool and considerably shortened
 verification cycles by automatically finding errors in design.
\layout Subsubsection

Modular testbench: Ethernet Model
\layout Standard

To simplify the main testbench, verification of Ethernet correctness is
 performed in a stand alone model.
 The model identifies short packets, long packets, short interframe gaps,
 incorrect FCS and a number of other Ethernet violations.
 Such errors are asserted as warnings, and packets are outputed is asserted
 as notes in hexadecimal notation.
\layout Subsubsection

Modular testbench: OPB Model / Loopback
\layout Standard

This model models the OPB bus.
 The model serves two main purposes: OPB Verification and Loopback.
\layout Subsubsection*

OPB Verification
\layout Standard

Verification of OPB behavior correctness is performed in the OPB Loopback
 Model.
 The model is able to identify several possible violations of the OPB bus.
 This part of the model is not directly Eth Version 1.00 specific.
 However improvements must be made before it is reusable as a general purpose
 Xilinx OPB verification model.
\layout Subsubsection*

Loopback
\layout Standard

Additionally the model also acts as a loopback device: Any packet received
 by the device will be outputed by the device, without modification.
\layout Subsection

Multiple Compilation and Synthesis
\layout Standard

Ethernet devices were compiled and simulated with two common simulation
 environments, Modeltech Modelsim and Cadence Logic Verification.
 Ethernet devices were compiled and synthesized with Xilinx Synthesis Technology
 (XST) and Synplicity Synplify Pro.
 By testing code in a large number of different tools, none portable VHDL
 constructs have been identified and removed, as well as most code constructs
 which cause warnings in any of the tools used.
\layout Subsection

Packet monitoring with The Ethereal Network Analyzer
\layout Standard

The Ethereal Network Analyzer (
\begin_inset Quotes eld
\end_inset 

Ethereal
\begin_inset Quotes erd
\end_inset 

) was used to capture Ethernet packets, efficiently monitoring network conversat
ions between Test PC and Ethernet peripheral.
 Ethereal tests were usually performed in a simple network consisting of
 a Test PC, a network switch and a prototype board (with a FPGA configured
 with a MicroBlaze platform).
 This setup is shown in figure 
\begin_inset LatexCommand \ref{cap:Network-Test-Setup}

\end_inset 

.
\layout Standard

Ethereal efficiently detected several types of bad layer 3 packets.
 This proved useful for tracking software errors.
\layout Standard

The switch and the Ethernet peripheral on the Test PC drop bad Ethernet
 packets, without showing them to Ethereal.
 Peripheral errors usually cause bad Ethernet packets.
 Because bad Ethernet packets are dropped, Ethereal was not very useful
 for detecting errors in the peripheral.
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:Network-Test-Setup}

\end_inset 

Network Test Setup
\layout Standard
\align center 

\begin_inset Graphics FormatVersion 1
	filename images/testsetup1.eps
	display default
	size_type 2
	scale 75
	rotateOrigin leftBaseline
	lyxsize_type 0

\end_inset 


\end_inset 


\layout Subsection

Real World Tests
\layout Standard

To verify hardware robustness, the Ethernet devices were used in a number
 of real world tests.
 Some of them, such as a simple ICMP Echo Request / ICMP Echo Reply test
\begin_inset Foot
collapsed true

\layout Standard

Commonly referred to as 
\begin_inset Quotes eld
\end_inset 

ICMP ping
\begin_inset Quotes erd
\end_inset 

 and performed by the command line tool 
\begin_inset Quotes eld
\end_inset 

ping
\begin_inset Quotes erd
\end_inset 

 which is included in most operating systems.
\end_inset 

, was performed for several hours with 0 packet loss.
 All real world tests indicates that the final designs are robust.
\layout Chapter


\begin_inset LatexCommand \label{cha:Comparing-Ethernet-peripherals}

\end_inset 

Comparing Ethernet peripherals
\layout Standard

Comparing peripherals is hard.
 Feature requirements, area requirements, system clock requirements may
 be different for each SoC project.
 A SoC is also likely to have high quality requirements, but quality is
 hard to measure.
\layout Standard

Given all these set of factors, it is not feasible to name a single peripheral
 which is optimal for all applications.
 However it is possible to compare peripherals and reason which is best
 for certain applications.
\layout Standard

A number of Ethernet peripherals have been compared: EMAC Lite - Xilinx
 OPB Ethernet Lite Media Access Controller, EMAC - Xilinx OPB Ethernet Media
 Access Controller, EthMac - Opencores.org 10/100 Ethernet MAC, Bandung -
 Bandung Institute of Technology 10/100 Ethernet MAC, Eth Version 1.00 Revision
 A and Eth Version 1.00 Revision C.
\layout Standard

Neither EthMac nor Bandung is an OPB device.
 Bandung has been included because it is a published student project and
 therefor created under conditions similar to Eth Version 1.00.
 EthMac has been included because it is a well verified MAC, has been in
 real world use, and is open source.
 It is reasonable that given some work, both Bandung and EthMac could be
 converted into OPB devices.
\layout Section

Feature comparison
\layout Standard

The following set of features has been compared in table 
\begin_inset LatexCommand \ref{cap:Ethernet-peripherals-feature}

\end_inset 

:
\layout Itemize

Asynchronous, e.g.
 the peripheral make use of MII/RMII clock signals to clock flipflops/registers.
 This is common practice to reach 100 MBit but has major a drawback: In
 several FPGAs, you only have a few clock input pins.
 Utilizing MII/RMII clocks in a peripheral may limit the application to
 a single Ethernet peripheral.
\layout Itemize

System bus.
 OPB is preferred because as it is the only native I/O bus in MicroBlaze.
\layout Itemize

DMA.
 Is the peripheral able to do direct memory access? This is important to
 make high performance applications.
\layout Itemize

MII Management.
 Is the peripheral able to read/write MII Management registers?
\layout Itemize

PAUSE frame support.
 This is an important Ethernet standard which prevents network congestion.
 If not supported in hardware, it should be supported in the software/drivers.
\layout Itemize

RMII support.
 RMII is a pin-reduced MII-similar interface, preferred in multi-interface/perip
herals designs such as switches.
\layout Standard

The only RMII peripherals are Eth Version 1.00 Revision A and C.
 This is a major advantage in multi-interface designs.
 EMAC Lite and Eth Version 1.00 Revision A are synchronous designs.
 This gives it future advantage in multi-interface designs since it does
 not utilize clock pins (which are scarce in some FPGA).
\layout Standard

The peripherals can be divided into a set of simple peripherals and advanced
 peripherals.
 EMAC and EthMac support a large set of features (DMA, MII Management, PAUSE
 frames) while the others does not.
 Therefor peripherals such as EMAC and EthMac are preferable if an application
 require a full scale DMA-capable interface.
 Peripherals such as EMAC Lite, Bandung and Eth Version 1.00 Revision A and
 C are preferable if only a simple peripheral is required.
\layout Standard


\begin_inset Float table
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:Ethernet-peripherals-feature}

\end_inset 

Ethernet peripherals feature comparison
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="7" columns="7">
<features>
<column alignment="left" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Device
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Async
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bus
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

DMA
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Mgt
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Pause
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RMII
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

EMAC Lite
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OPB
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

EMAC
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OPB
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

EthMac
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

WB
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bandung
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Eth v1.00 A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OPB
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Eth v1.00 C
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OPB
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 

 
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Header/Note
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Description / Explanation
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Async
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Asynchronous; utilize MII/RMII clocks to trigger flipflops
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Mgt
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

MII Management interface support
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Pause
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Ethernet full duplex PAUSE frame support
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RMII
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Reduced MII interface support
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Section

Speed comparison
\layout Standard

Speed comparison is performed against a Xilinx Virtex-E FPGA (chip xsv2000e-8-FG
1156).
 One reason for using this particular FPGA is that one prototype board available
 for during the evaluation was Virtex-E based.
 Another reason is that speed/area statistics for this particular FPGA is
 included in EMAC / EMAC Lite documentation.
\layout Standard


\begin_inset Formula $f_{max}$
\end_inset 

 is the maximum system clock frequency.
 For configurable designs (such as EMAC / EMAC Lite), the greatest value
 for 
\begin_inset Formula $f_{max}$
\end_inset 

 is listed.
 For Eth v1.00 Revision A and C, MII configuration is used.
\layout Standard


\begin_inset Formula $f_{max}$
\end_inset 

 is derived by synthesizing the design with XST (optimization level 2 and
 optimization mode 
\begin_inset Quotes eld
\end_inset 

speed
\begin_inset Quotes erd
\end_inset 

).
 Then the netlist is passed through the Xilinx Place & Route flow (overall
 effort set to 5, extra effort set to 2) utilizing a set of Ethernet timing
 constraints (table
\begin_inset LatexCommand \ref{cap:Ethernet-timing-constraints}

\end_inset 

) used by Xilinx in EMAC documentation.
 The system constraint is tweaked a minimum period is found for which all
 constraints are met.
\layout Standard

Then 
\begin_inset Formula $f_{max}$
\end_inset 

 is calculated as 
\begin_inset Formula $f_{max}=\frac{1000}{system\, clock\, period\, (nanoseconds)}$
\end_inset 

 MHz.
\layout Standard

Table 
\begin_inset LatexCommand \ref{cap:System-clock-and-reset-constraints}

\end_inset 

 illustrates a 133 MHz system clock constraint.
\layout Standard

For EMAC and EMAC Lite, the corresponding values are extracted from the
 specification.
\layout Standard


\begin_inset Float table
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:Ethernet-timing-constraints}

\end_inset 

Ethernet timing constraints
\layout LyX-Code

NET "rx_clk" TNM_NET = "RXCLK_GRP"; 
\layout LyX-Code

NET "tx_clk" TNM_NET = "TXCLK_GRP"; 
\layout LyX-Code

TIMESPEC "TSTXOUT" = FROM "TXCLK_GRP" TO "PADS" 10 ns; 
\layout LyX-Code

TIMESPEC "TSRXIN" = FROM "PADS" TO "RXCLK_GRP" 6 ns;
\layout LyX-Code

NET "rx_clk" USELOWSKEWLINES;
\layout LyX-Code

NET "tx_clk" USELOWSKEWLINES; 
\layout LyX-Code

NET "tx_clk" MAXSKEW= 2.0 ns; 
\layout LyX-Code

NET "rx_clk" MAXSKEW= 2.0 ns; 
\layout LyX-Code

NET "rx_clk" PERIOD = 40 ns HIGH 14 ns; 
\layout LyX-Code

NET "tx_clk" PERIOD = 40 ns HIGH 14 ns; 
\layout LyX-Code

NET "rx_d<3>" NODELAY; 
\layout LyX-Code

NET "rx_d<2>" NODELAY; 
\layout LyX-Code

NET "rx_d<1>" NODELAY; 
\layout LyX-Code

NET "rx_d<0>" NODELAY; 
\layout LyX-Code

NET "rx_dv" NODELAY; 
\end_inset 


\layout Standard


\begin_inset Float table
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:System-clock-and-reset-constraints}

\end_inset 

System clock and reset constraints
\layout LyX-Code

NET "opb_clk" TNM_NET = "opb_clk"; 
\layout LyX-Code

TIMESPEC "TS_opb_clk" = PERIOD "opb_clk" 7.5 ns HIGH 50 %;
\layout LyX-Code

NET "opb_rst" TIG; 
\end_inset 


\layout Standard

The results are shown in table 
\begin_inset LatexCommand \ref{cap:Ethernet-peripherals-performance}

\end_inset 

.
\layout Standard


\begin_inset Float table
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:Ethernet-peripherals-performance}

\end_inset 

Ethernet peripherals performance comparison
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="9" columns="6">
<features>
<column alignment="left" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $f_{min}$
\end_inset 


\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

MII
\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RMII
\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Device
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

10 MBit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

100 MBit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

10 MBit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

100 MBit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $f_{max}$
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

EMAC Lite
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

5 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

50 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

80.8 MHz
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

EMAC
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

5 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

50 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

88.0 MHz
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

EthMac
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

76.9 MHz
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bandung
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $(a)$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $(a)$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $(a)$
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Eth v1.00 A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

12.5 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

125 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

25 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

137 MHz
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Eth v1.00 C
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

3.1 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

31 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

6.2 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

62 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

137 MHz
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Header/Note
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Description / Explanation
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $f_{min}$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Minimum system clock frequency
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $f_{max}$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Maximum system clock frequency
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $(a)$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Bandung MAC utilize MII clocks.
 No system clock.
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Section

Area comparison
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="1" columns="1">
<features>
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

TO BE WRITTEN
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Section

Quality comparison
\layout Standard

EMAC Lite and EMAC is considered production quality by the Xilinx cooperation.
 EthMac is considered production quality by the opencores.org developers.
 These three MACs have been tested by developers as well as number of users/cust
omers.
 Therefor, they are by far the best verified devices.
\layout Standard

Bandung and Eth Version 1.00 Revision A, C are not as well verified.
 
\layout Standard

The Eth Version 1.00 revisions has been reused by a small number of students.
 Eth has also passed a number of verification tests.
 Therefor the Eth 1.00 revisions are considered to be of good academic quality
 but more tests are needed before they can be considered to be of production
 quality.
 
\layout Standard

There is not much information regarding verification and reuse Bandung MAC.
 Comments on the Bandung MAC homepage indicate that the design is incomplete.
 Bandung quality therefor is considered poor.
\layout Section

Details about the devices used in analysis
\layout Subsection

EMAC Lite - Xilinx OPB Ethernet Lite Media Access Controller
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="1" columns="1">
<features>
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

TO BE WRITTEN
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard

50 MHz for 100 MBit
\layout Standard

5 MHz for 10 MBit
\layout Standard

Virtex-E -8; 80.2 MHz full duplex, 75.5 MHz half
\layout Standard

no MII management
\layout Standard

no pause frame support
\layout Subsection

EMAC - Xilinx OPB Ethernet Media Access Controller
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="1" columns="1">
<features>
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

TO BE WRITTEN
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard

multiple packets, 2 or 4 kb fifos, up to 16 packets per fifo, pause frame
 support, MII management, DMA or FIFO-read-registers, autopad, promiscious
 mode optional, etc etc 
\layout Subsection

EthMac - Opencores.org 10/100 Ethernet MAC
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="1" columns="1">
<features>
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

TO BE WRITTEN
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Subsection

Bandung - Bandung Institute of Technology 10/100 Ethernet MAC
\layout Standard

The Bandung MAC is a simple Ethernet MAC.
 It is not designed for SoC implementation, instead it is externally interfaced
 using the prototype board's SRAM as a shared medium.
 A PC controls the MAC utilizing the shared medium.
\layout Standard

The transmit modules of The Bandung MAC are broken.
 The Bandung MAC homepage states: 
\begin_inset Quotes eld
\end_inset 

the transmitter can only send a few bytes
\begin_inset Quotes erd
\end_inset 

.
 This is a half-finished academic design.
\layout Standard

Key aspects:
\layout Itemize

10/100 MBit, MII only
\layout Itemize

Half Duplex supported
\layout Itemize

Full Duplex supported, but no PAUSE frame support
\layout Itemize

No system bus - Interfaced through shared SRAM medium
\layout Itemize

Asynchronous
\layout Itemize

No MII Management module
\layout Chapter


\begin_inset LatexCommand \label{cha:Network-software-for-Microblaze}

\end_inset 

Network software for MicroBlaze
\layout Section

Small TCP/IP stacks for embedded applications
\layout Standard

In the context of small TCP/IP stacks, it is interesting to know 
\begin_inset Quotes eld
\end_inset 

how small is a small TCP/IP stack?
\begin_inset Quotes erd
\end_inset 

.
 The answer is simple - it depends upon what you are comparing to.
 Extreme application specific stacks may only contain 256 bytes of code,
 a general stack is hard to make small.
\layout Standard

Therefore, we define a number of characteristics preferred in a small TCP/IP
 stack:
\layout Itemize

The stack should be general and reusable, not designed for a single application.
\layout Itemize

The TCP/IP stack should provide two buffers: one for receiving and one sending
 packet.
 These buffers may be as small as a single packet, which enable simple interface
s for handling datagram oriented stacks (ARP, ICMP, UDP and others).
 These buffers may be reused by all datagram functions to save memory.
\layout Itemize

The stack should not be multi-user oriented
\begin_inset Foot
collapsed true

\layout Standard

There are usually no user (or a single user) in SoCs and embedded applications.
 Providing memory protection and multi-user handling is memory expensive
 and serve no purpose in this context.
\end_inset 

.
\layout Itemize

The stack should be modular.
 If an application only need ARP+UDP, or ARP+ICMP, it should not be required
 to implement memory expensive protocols such as TCP.
\layout Itemize

The stack should be available as well commented/documented source code
\begin_inset Foot
collapsed true

\layout Standard

Because developers may wish to tweak the stack for the specific application.
\end_inset 

.
 
\layout Subsection

Xilinx XilNet
\layout Standard

Xilinx XilNet is a small TCP/IP stack included in MDK MicroBlaze.
 It is provided to demonstrate MicroBlaze networking capabilities.
 However XilNet suffers a number of major drawbacks:
\layout Itemize

No networking device is included in MicroBlaze, so it is impossible to use
 XilNet with MDK peripherals only.
\layout Itemize

The requirements on MAC send/receive functions are unspecified.
 No example of such functions are provided for reference.
\layout Itemize

No example application utilizing XilNet is provided.
\layout Itemize

XilNet is 
\begin_inset Quotes eld
\end_inset 

unsupported
\begin_inset Quotes erd
\end_inset 

, as opposed to all other MDK library.
\layout Itemize

XilNet documentation is of low quality and only function oriented.
\layout Subsubsection

Several issues with XilNet
\layout Standard

Attempts were made to make XilNet work.
 MAC functions were simple to design, and ARP was successfully tested.
 IPv4/ICMP tests failed.
 XilNet was able to receive ICMP Echo Request packets, but the following
 errors were observed on the corresponding ICMP Echo Reply packets:
\layout Itemize

IPv4 checksum incorrect.
\layout Itemize

ICMP length incorrect.
\layout Itemize

ICMP checksum incorrect.
\layout Standard

These errors may be due to incorrect usage of XilNet or a flaw in XilNet
 itself.
 Xilinx Embedded Processor Forum was searched for a solution.
 The forum indicates that there are many unresolved issues 
\begin_inset LatexCommand \cite{XPEF-XilNet1,XPEF-XilNet2}

\end_inset 

 even in recent XilNet versions.
\layout Subsubsection

Modularity
\layout Standard

XilNet has a modular design at file level (
\emph on 
arp.c
\emph default 
, 
\emph on 
ip.
\emph default 
c, 
\emph on 
tcp.c
\emph default 
 and such).
 However there are several interdependency, especially in the file 
\emph on 
ip.c
\emph default 
.
 A number of changes to ip.c (mainly preprocessor directives such as 
\emph on 
#ifdef
\emph default 
 and 
\emph on 
#endif
\emph default 
) were applied and XilNet was successfully stripped of TCP support to save
 memory.
\layout Subsubsection

Functionality
\layout Standard

XilNet TCP support is limited.
 It supports only a single concurrent TCP connection.
\layout Subsubsection

Overall
\layout Standard

XilNet is a very small TCP/IP stack.
 There are several issues with XilNet which must be resolved.
\layout Subsection

lwIP
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="1" columns="1">
<features>
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

TO BE WRITTEN
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Chapter


\begin_inset LatexCommand \label{cha:Conclusions}

\end_inset 

Conclusions
\layout Chapter


\begin_inset LatexCommand \label{cha:Future-work}

\end_inset 

Future work
\layout Section

Embedded Development Kit
\layout Standard

For this evaluation EDK was not available.
 All experiments have been perfomed in the MDK environment.
 An re-evaluation using EDK would be usefull.
 EDK could possibly remedy several of the problems associated with MDK.
\layout Section

Porting OpenCores 10/100 Ethernet MAC to OPB
\layout Standard

The OpenCore 10/100 Ethernet MAC is well verified and has been used by a
 large set of developers and has been used in professional projects.
 Therefore this MAC is of production quality and at the same time it is
 free and released as a GPL open source core.
\layout Standard

The MAC use the Wishbone as I/O bus.
 It would be interesting to port this MAC to Xilinx OPB.
 A port may be of interest to developers with limited funding or with previous
 experience of this MAC.
\layout Standard

There are at least two ways to port the Wishbone MAC:
\layout Itemize

Rewrite the top module (and some of the components) for Xilinx OPB.
\layout Itemize

Create a Wishbone 
\begin_inset Formula $\Leftrightarrow $
\end_inset 

 OPB bridge for the MAC.
\layout Standard

The later approach may be much more beneficial because then the port would
 not break upon changes in the OpenCores MAC source code.
 It may also be simpler, as it require only basic understanding of Wishbone
 and OPB.
 The 
\begin_inset Quotes eld
\end_inset 

OPB Usage Notes
\begin_inset Quotes erd
\end_inset 

 
\begin_inset LatexCommand \cite{MB_HWREF}

\end_inset 

 provided by Xilinx, intended to aid bridging Xilinx OPB with other OPBs,
 might also be used in the development of the bridge.
\layout Section

Improving Eth Version 1.00
\layout Standard

These peripherals may be extended with several features;
\layout Itemize

Half Duplex (CSMA/CD) support
\layout Itemize

None-promiscuous mode
\layout Itemize

MII Management
\layout Itemize

PAUSE frame support
\layout Standard

Revision A is single edge triggered and synchronous.
 Revision C is asynchronous and all flipflops triggered on rising edge.
 By utilizing both egdes minimum clock frequency and power dissipation may
 be reduced.
 This is most likely performed in other peripherals (e.g.
 Xilinx EMAC) which synchronously detect MII rising edges at half the frequency
 of Eth Revision A.
\layout Standard

Eth would benefit greatly from an independant and professional verification.
 As of current date, it has only been used and vertified in student projects
 which are known to have loosely defined quality demands.
 Professional engineers would not consider Eth to be of production quality.
\layout Bibliography
\bibitem [ETHERNET]{Book-Gigabit-Ethernet}

Jayant Kadambi, Ian Crayford, Mohan Kalkunte.
\newline 

\emph on 
Gigabit Ethernet - Migrating to High-Bandwidth LANs
\emph default 
.
 
\newline 
Prentice Hall, 1998.
 ISBN 0-13-913286-4
\layout Bibliography
\bibitem [IBM1]{CoreConnect_WhitePaper}


\emph on 
The CoreConnect
\begin_inset Formula $^{\textrm{TM}}$
\end_inset 

 Bus Architecture (White Paper)
\emph default 

\newline 
International Busniess Machines Corporation (IBM), 1999.
\newline 

\emph on 
http://www.chips.ibm.com/products/coreconnect/
\layout Bibliography
\bibitem [XMB1]{MB_HWREF}


\emph on 
MicroBlaze
\begin_inset Formula $^{\textrm{TM}}$
\end_inset 

 Hardware Reference Guide (version 2.2)
\emph default 
.
\newline 
Xilinx Inc., 2002.
 
\newline 

\emph on 
http://www.xilinx.com/ipcenter/processor_central/
\newline 
microblaze/doc/hwref.pdf
\layout Bibliography
\bibitem [XMB2]{MB_SWREF}


\emph on 
MicroBlaze
\begin_inset Formula $^{\textrm{TM}}$
\end_inset 

 Software Reference Gudie (version 2.2)
\emph default 
.
\newline 
Xilinx Inc, 2002.
\newline 

\emph on 
http://www.xilinx.com/ipcenter/processor_central/
\newline 
microblaze/doc/swref.pdf
\layout Bibliography
\bibitem [XMB3]{MB_TUTORIAL}


\emph on 
MicroBlaze Development Kit Tutorial (version 2.2).
\emph default 

\newline 
Xilinx Inc, 2002.
\newline 

\emph on 
http://www.xilinx.com/ipcenter/processor_central/
\newline 
microblaze/doc/mb_tutotial_c2bits.pdf
\layout Bibliography
\bibitem [XMB4]{MB_OPB_TUTORIAL}


\emph on 
Designing Custom OPB Slave Peripherals for MicroBlaze.
\emph default 

\newline 
Xilinx Inc, 2002.
\newline 

\emph on 
http://www.xilinx.com/ipcenter/processor_central/
\newline 
microblaze/doc/opb_tutorial.pdf
\layout Bibliography
\bibitem [XAPP632]{XAPP632_Programming_via_E-Mail}

Marc Defossez.
\newline 
Programming an FPGA via E-Mail.
\newline 
In 
\emph on 
Xilinx Application Note 632 (v 1.0)
\emph default 
, 2002.
\layout Bibliography
\bibitem [XTE1]{XTE-Asynchronous}

Peter Alfke.
\newline 
Moving Data Across Asynchronous Clock Boundaries
\newline 
In 
\emph on 
Xilinx techXclusives
\emph default 
, 2001.
\layout Bibliography
\bibitem [XEPF1]{XEPF-Platgen-OPB-Limitation}

Mathew Oullette et al.
 
\newline 
Platgen: OPB Limitation
\newline 
In 
\emph on 
Xilinx Embedded Processor Forum
\emph default 
, 2002.
\layout Bibliography
\bibitem [XPEF2]{XPEF-XilNet1}

Brett Boren et al.
\newline 
Xilnet: more meaningful examples please.
\newline 
In 
\emph on 
Xilinx Embedded Processor Forum
\emph default 
, 2003.
\layout Bibliography
\bibitem [XPEF3]{XPEF-XilNet2}

Brett Boren, Trond Kortner et al.
\newline 
XilNet: Incomplete tcp/ip stack.
\newline 
In 
\emph on 
Xilinx Embedded Processor Forum
\emph default 
, 2003.
\layout Bibliography
\bibitem [FOLDOC]{FOLDOC}

Denis Howe et.al.
\newline 
FOLDOC - Free On-Line Dictionary of Computing.
\newline 
Imperial Collage Department of Computing.
\newline 
1993-2003.
 
\emph on 
http://foldoc.doc.ic.ac.uk/foldoc/
\layout Bibliography
\bibitem [FPGACPU]{Site-fpgacpu.org}

FPGA CPU News.
 
\newline 
2003.
 
\emph on 
http://www.fpgacpu.org/
\layout Bibliography
\bibitem [OPENCORES]{Site-OpenCores}

OPENCORES.ORG.
\newline 
2003.
 
\emph on 
http://www.opencores.org/
\layout Chapter*

Copyrights & Trademarks
\layout Standard

All products and company names are service marks, trademarks or registered
 trademarks are the property of their respective owners.
 This thesis include images from copyrighted materials for academic citation
 purposes.
 All images included from copyrighted materials are the property of their
 respective owners.
\layout Chapter
\start_of_appendix 
Eth Version 1.00 Revision A Schematics
\layout Standard


\begin_inset Float figure
wide false
collapsed true

\layout Caption


\begin_inset LatexCommand \label{cap:TX-Core}

\end_inset 

Eth Version 1.00 Revision A, TX Core
\layout Standard
\align center 

\begin_inset Graphics FormatVersion 1
	filename images/ethtx-core-hack.eps
	display default
	size_type 1
	width 95text%
	keepAspectRatio
	rotateOrigin leftBaseline
	lyxsize_type 0

\end_inset 


\end_inset 


\layout Standard


\begin_inset Float figure
wide false
collapsed true

\layout Caption


\begin_inset LatexCommand \label{cap:RX-Core}

\end_inset 

Eth Version 1.00 Revision A, RX Core
\layout Standard
\align center 

\begin_inset Graphics FormatVersion 1
	filename images/ethrx-core-hack.eps
	display default
	size_type 1
	height 70page%
	keepAspectRatio
	rotateOrigin leftBaseline
	lyxsize_type 0

\end_inset 


\end_inset 


\layout Chapter

List of acronyms
\layout Itemize

ASIC - Application Specific Integrated Circuit
\layout Itemize

AUI - Attachment Unit Interface
\layout Itemize

Bandung - Bandung Institute of Technology 10/100 Ethernet MAC
\layout Itemize

CPU - Central Processing Unit
\layout Itemize

CSEE - Department of Computer Science and Electrical Engineering at Luleå
 University of Technology
\layout Itemize

CSMA/CD - Carrier Sense Multiple Access / Collision Detect
\layout Itemize

DA - Destination Address
\layout Itemize

DCR - Device Control Register bus
\layout Itemize

DMA - Direct Memory Access
\layout Itemize

EDK - Embedded Development Kit
\layout Itemize

EISLAB - Embedded Internet Systems Laboratory
\layout Itemize

EMAC - Xilinx OPB Ethernet Media Access Controller
\layout Itemize

EMAC Lite - Xilinx OPB Ethernet Lite Media Access Controller
\layout Itemize

EthMac - Opencores.org 10/100 Ethernet MAC
\layout Itemize

FCS - Frame Check Sequence
\layout Itemize

FlashRAM - Flashable (Non-Volatile) Random Access Memory
\layout Itemize

FPGA - Field Programmable Gate Array
\layout Itemize

GHz - Giga Hertz
\layout Itemize

I/O - Input/Output
\layout Itemize

IBM - International Bussniess Machines Coproration
\layout Itemize

ICMP - Internet Control Message Protocoll
\layout Itemize

IP - Internet Protocol
\layout Itemize

IPv4 - Internet Protocol Version 4
\layout Itemize

LMB - Local Memory Bus
\layout Itemize

lwIP - Light Weight Internet Protocol
\layout Itemize

MAC - Media Access Controller
\layout Itemize

MAU - Medium Attachment Unit
\layout Itemize

MBit/s - Mega Bit per second
\layout Itemize

MDK - MicroBlaze Development Kit
\layout Itemize

MHz - Mega Hertz
\layout Itemize

MII - Medium Indepentent Interface
\layout Itemize

OPB - IBM CoreConnect On-Chip Peripheral Bus
\layout Itemize

PHY - Physical Layer Device
\layout Itemize

PLB - Processor Local Bus
\layout Itemize

PLD - Programmable Logic Device
\layout Itemize

PROM - Programmable Read-Only Memory
\layout Itemize

RAM - Random Access Memory
\layout Itemize

RMII - Reduced Medium Indepentent Interface
\layout Itemize

ROM - Read-Only Memory
\layout Itemize

SA - Source Address
\layout Itemize

SoC - System on Chip
\layout Itemize

SRAM - Static Random Access Memory
\layout Itemize

TCP - Transmission Control Protocol
\layout Itemize

TCP/IP - The Internet Protocol Version 4 protocol suite (TCP, UDP, ICMP
 etc)
\layout Itemize

TYPE - Type-field (Ethernet frames)
\layout Itemize

SYNC - Synchronization bits (Ethernet frames)
\layout Itemize

UDP - User Datagram Protocol
\layout Itemize

XST - Xilinx Synthesis Technology
\the_end
