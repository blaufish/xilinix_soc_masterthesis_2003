#LyX 1.2 created this file. For more info see http://www.lyx.org/
\lyxformat 220
\textclass report
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize a4paper
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

Evaluating Xilinx MicroBlaze for Network SoC solutions
\newline 
--- DRAFT - WORK IN PROGRESS ---
\newline 

\layout Author

Peter Magnusson
\newline 
petmag-8@sm.luth.se
\layout Abstract

Xilinx MicroBlaze is a processor core for implementation in Xilinx Field
 Programmable Arrays (FPGA) circuits.
 This thesis explores the possibility of utilizing Xilinx MicroBlaze and
 IBM CoreConnect On-Chip Peripheral Bus peripherals in a single FPGA to
 provide a System on Chip (SoC) solution for an aribitery set of network
 applications.
 Typical applications include Ethernet switches, Internet-connected embedded
 systems, small IP clients for handheld devices and simple Internet gateways.
\layout Chapter*

Preface
\layout Standard

The evaluation of the Xilinx MicroBlaze has been performed as a Master Thesis
 work in Computer Science and Engineering.
 The evaluation was performed at Department of Computer Science and Electrical
 Engineering (CSEE) and Embedded Internet Systems Laboratory (EISLAB) at
 Luleå Univeristy of Technology.
 
\layout Standard

I wish to thank 
\layout Itemize

Ph.d.
 Per Lindgren for supervising my thesis.
\layout Itemize

Ph.d.
 student Jonas Thor for feedback on various computer engineering topics.
\layout Itemize

MS.c.
 student Jens Eliasson for various MicroBlaze discussions.
\layout Itemize

MS.c.
 students Jan Dahlberg, Johan Mattsson and Frederik Schmid for reusing and
 bugtesting my Ethernet MAC.
\layout Standard

During my work on the theisis, I have tought MicroBlaze based System on
 Chip (SoC) development to MS.c.
 students in the Digital Synthesis course at CSEE.
 Additional credits goes to these students for valuable input.
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Standard


\begin_inset FloatList figure

\end_inset 


\layout Standard


\begin_inset FloatList table

\end_inset 


\layout Chapter


\begin_inset LatexCommand \label{cha:Introduction}

\end_inset 

Introduction
\layout Chapter


\begin_inset LatexCommand \label{cha:Limitation}

\end_inset 

Limitations
\layout Chapter

Dispotion
\layout Standard

\SpecialChar ~

\layout Standard

Chapter 
\begin_inset LatexCommand \ref{cha:Introduction}

\end_inset 

 gives a general introduction to the thesis and the work perfomed to evaluate
 Xilinx MicroBlaze.
 
\layout Standard

Chapter 
\begin_inset LatexCommand \ref{cha:Limitation}

\end_inset 

 covers what how the evaluation have been constrained and what thesis does
 not cover.
 
\layout Standard

Chapter 
\begin_inset LatexCommand \ref{cha:Technology-&-Background}

\end_inset 

 covers the technologies which is used and referred to in the thesis.
\layout Standard

Chapter 
\begin_inset LatexCommand \ref{cha:Xilinx-MicroBlaze}

\end_inset 

 introduces Xilinx MicroBlaze and the MDK software.
\layout Standard

Chapter 
\begin_inset LatexCommand \ref{cha:Xilinx-MicroBlaze-as-a-Network-SoC}

\end_inset 

 investigastes the possibilty of using Xilinx MicroBlaze in a network SoC.
\layout Standard

Chapter 
\begin_inset LatexCommand \ref{cha:Development-of-Microblaze-ethernet-peripherals}

\end_inset 

 outlines the design of a set of Ethernet peripherals for Xilinx MicroBlaze.
\layout Standard

Chapter 
\begin_inset LatexCommand \ref{cha:Comparing-Ethernet-peripherals}

\end_inset 

 compares the Ethernet peripherals designed to a number of other Ethernet
 peripherals..
\layout Standard

Chapter 
\begin_inset LatexCommand \ref{cha:Network-software-for-Microblaze}

\end_inset 

 covers network software, such as TCP/IP stacks, available to Xilinx MicroBlaze.
\layout Standard

Chapter 
\begin_inset LatexCommand \ref{cha:Conclusions}

\end_inset 

 covers the conclusions drawn from the work on this thesis.
\layout Standard

Chapter 
\begin_inset LatexCommand \ref{cha:Future-work}

\end_inset 

 sugests which futher work could be performed to improve the evaluation
 of MicroBlaze or to extend it's network capabilities.
\layout Chapter


\begin_inset LatexCommand \label{cha:Technology-&-Background}

\end_inset 

Technology & Background
\layout Section

System on Chip (SoC) solutions
\layout Standard

System on Chip (SoC) refers to devices where all essential parts of a computing
 systems have been integrated in a single circuit.
 A typical SoC includes one (or many) processor core(s), an aribitrary number
 of peripherals for input/output, some on-chip memory and an interface for
 connecting external memory, and one or several busses which interconnects
 all these devices.
\layout Standard

As SoCs usually are designed with a limited set of applications in mind,
 they tend to need less CPU power than a general purpose computer.
 While a modern workstation operates with clock frequences in the range
 of 500 MHz - 3 GHz, the SoC CPU might operate at just a few megahertz.
 An ideal SoC CPU is operating at the minimum clock frequence needed to
 properly perform the desired application.
 By maintaining a low clock frequence the power consumtion and chip temperature
 is reduced.
 This allows SoCs to operate with less cooling devices and better battery/power
 utilization.
\layout Subsection

What is a microcontroller and what is a SoC?
\layout Standard

A typical microcontroller consists of a single processor core, some memory
 and a few simple peripherals.
 Most microcontrollers share the following properties: they are cheap, they
 are energy efficient and they are more or less general purpose.
 Therefore microcontrollers can be considered to be a subset of SoCs.
\layout Section

Application Specific Interated Circuit (ASIC)
\layout Standard

Application Specific Interated Circuit (ASIC) is one of the most common
 type of chips.
 An ASIC may implement simple designs (
\begin_inset Quotes eld
\end_inset 

application
\begin_inset Quotes erd
\end_inset 

 in ASIC terms) but also large design such as SoCs.
\layout Standard

An ASIC is designed for a specific applications and can be heavily customized
 for reduced low power dissipation, small area or high clock frequencies.
 Other important ASIC characteristics is low reconfigurability, long design
 phazes, large startup costs and low mass production costs.
 This makes ASIC ideal for large scale manufacturing of well verified designs,
 but badly suited for prototypes.
\layout Section

Programmable logic devices (PLDs)
\layout Standard

Programmable logic devices are chips which can programmed to behave as an
 aribitrary design.
 A PLD may be programmed to implement something as simple as a small net
 of combinatory logic, but it may also implement a large design such as
 a SoC.
 One common type of programmable logic devices is FPGAs.
\layout Subsection

Field Programmable Gate Arrays (FPGAs)
\layout Standard

Field Programmable Gate Array (FPGA) is a type of programmable devices.
 An FPGA contains a generic architecture with configurable logic and routing.
 FPGAs are expensive, but can contain enough logic to implement advanced
 systems, such as a System on Chip.
 
\layout Standard

FPGAs are not optimized for any specific application, and therefore they
 may consume more power or implement a design less efficient than a ASIC.
 However an FPGA is easily reprogrammed and which shortens designcycles
 and allows early real world tests.
 This makes FPGAs perfect for prototypes and small production volumes.
 FPGAs are also usefull in first generation manufacturing if standards and
 applications are subject to change, or if an application must be released
 before engineers consider the design safe for implementation in an ASIC.
\layout Section


\begin_inset LatexCommand \label{sec:On-Chip-Peripheral-Bus}

\end_inset 

On-Chip Peripheral Bus (OPB)
\layout Standard

The IBM Core Connect On-Chip Peripheral bus
\begin_inset Foot
collapsed true

\layout Standard

Referred to as 
\begin_inset Quotes eld
\end_inset 

OPB
\begin_inset Quotes erd
\end_inset 

 or 
\begin_inset Quotes eld
\end_inset 

OPB Bus
\begin_inset Quotes erd
\end_inset 

 in this paper.
\end_inset 

 is an easy to use bus, allowing an aribtrary number of masters to read
 from / write to an aribitrary number of slaves.
 The bus is highly customizeable, as an example bus widths are configurable
 and response times and several other paramarers are implementation specific.
 Given this level of configurability, OPB devices are generally 
\emph on 
not
\emph default 
 compatible unless they share the same OPB paramaters.
\layout Standard

The bus includes a data bus and an address bus.
 A typical OPB device use the most significant bits of the address bus to
 determine weather it was selected or not, and the least significant bits
 to determine which register (internal address) was accessed.
 
\layout Standard

A normal OPB access can be performed in one cycle.
 Slow OPB devices may responed in up to 16 cycles, or an aribitrary number
 of cycles if issuing a Timout Supress signal.
\layout Standard

When several OPB masters share a bus, an OPB Aribter is used to grant exclusive
 bus access.
 In these systems, a master may have to wait an aribitrary number of cycles
 until the bus is idle.
 The OPB Aribter itself may also introduce a short mandatory delay before
 it grant access.
 An OPB master may utilize bus lock / sequencial access to make several
 slave accesses per aribitrated bus grant.
 Utilization of sequencial access keeps arbitration overhead to a minimum.
\layout Subsection


\begin_inset LatexCommand \label{sub:Xilinx-OPB}

\end_inset 

Xilinx OPB
\layout Standard

Xilinx implements the IBM CoreConnect On-Chip Peripheral bus with most configura
ble OPB parameters set to specific values.
 Important parameters include datawidth which is set to 32 and addresswidth
 which also is set to 32.
 Xilinx documents how some other OPB implementations may be interconnected,
 such as OPB-devices with less addresswidth.
\layout Standard

This definition of OPB parameters makes all Xilinx OPB devices compatible.
 Xilinx compatible OPB devices include Xilinx MicroBlaze softcore processor,
 Xilinx PicoBlaze softcore processor and a large set of OPB peripherals.
 Xilinx also provides bridge which allows the IBM PPC 440 processor core
 built into recent Xilinx Virtex II Pro FPGAs to be interconnected with
 the OPB devices.
\layout Section

About Ethernet 10/100 MBit
\layout Standard

Ethernet 10/100 MBit
\begin_inset Foot
collapsed true

\layout Standard

Any reference to 
\begin_inset Quotes eld
\end_inset 

Ethernet
\begin_inset Quotes erd
\end_inset 

 in this paper referes to the 10/100 MBit Ethernet standards.
 Gigabit Ethernet, Experimental Ethernet and other none 10/100 Mbit versions
 of Ethernet are not in the scope of this paper.
\end_inset 

 is a network link (OSI layer 2) protocol.
 Ethernet is by far the most common layer 2 protocol for LANs (Local Area
 Network).
 An Ethernet Packet (figure 
\begin_inset LatexCommand \prettyref{cap:Ethernet-Packet-Format}

\end_inset 

) includes a 14 byte header (DA, SA, TYPE) and a 46 to 1500 byte DATA section.
 In a typical implementation, hardware manages access control, synchronization
 (PREAMBLE, SYNC) and error detection (FCS).
 Hardware may or may not verify source address (SA).
 Packets can be based in three classes based upon source address:
\layout Itemize

Broadcast packets; sent to all hosts
\layout Itemize

Multicast packets; sent to a group of hosts
\layout Itemize

Unicast packets; sent to a specific host
\layout Standard

As an endhost, a packet is considered to be a stray if is a multicast packet
 sent to a group which the device does not participate in, or if it is a
 unicast packet sent to another host.
 Stray packets are common in ethernet (in a half duplex network, they are
 in fact more common than none stray packets).
 Many end host ethernet devices drop stray packets instead of passing them
 to software.
 To not drop stray packets, is commonly refered to as 
\begin_inset Quotes eld
\end_inset 

promiscuous mode
\begin_inset Quotes erd
\end_inset 

.
 Several end host devices can enable/disable promiscuous mode by software.
 Interconnect devices such as network swicthes, can be considered to operate
 in promiscious mode.
\layout Standard


\begin_inset Float figure
wide false
collapsed true

\layout Caption


\begin_inset LatexCommand \label{cap:Ethernet-Packet-Format}

\end_inset 

Ethernet Packet Format
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="3" columns="7">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

PREAMBLE
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SYNCH
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

DA
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SA
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

TYPE
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

DATA
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

FCS
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

62
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

2
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

6
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

6
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

2
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

46-1500
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

4
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

bits
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

bits
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

bytes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

bytes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

bytes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

bytes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

bytes
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Subsection

Full Duplex, Half Duplex, and Auto negociation
\layout Standard

An Ethernet device is either operating at Full Duplex or Half Duplex mode.
 Most Ethernet devices can be configured to Auto Negociate duplex or to
 use a staticly selected duplex mode.
 
\layout Standard

In half duplex, an aribatry number of ethernet devices share a single Ethernet
 medium, using the CSMA/CD access protocol.
 Half duplex is an inefficient and antique Ethernet mode, although still
 in use in a dwindeling number of legacy networks.
\layout Standard

In full duplex mode each Ethernet device has a dedicated send medium and
 a dedicated receive medium.
 Interconnections are handled by network switches.
 A special ethernet PAUSE frame is used to notify a sender that a Ethernet
 device is congested and may not recieve more packets for a period of time.
 Pending on network design and switch capacity allows much more throughput
 than half duplex, as several parallell mediums may be utilized concurently
 instead of a single shared medium.
\layout Standard

Most common Ethernet devices support Half, Full and Auto duplex, and will
 negociate Full Duplex unless negociating with a Half Duplex only Ethernet
 interface.
\layout Subsection

10 MBit, 100 MBit or Auto Negociation
\layout Standard

Today,10 MBit Ethernet devices are still available for sale, but the faster
 100 MBit Ethernet is by far more common.
 However, many old devices are 10 MBit only.
 Most 100 MBit devices will Auto Negociate to 100 MBit unless negociating
 with a 10 Mbit device.
 Most (if not all) 100 MBit Ethernet devices support 10/100 MBit Auto Negociatio
n.
\layout Subsection


\begin_inset LatexCommand \label{sub:MAU-PHY}

\end_inset 

Physical device (PHY)
\layout Standard

Ethernet can be used in several different mediums, typically coaxial cables,
 optical fibers and twisted pair cables.
 To simplify development, a PHY (or MAU
\begin_inset Foot
collapsed true

\layout Standard

Medium Attachment Unit (MAU) is used in Ethernet 10 MBit references.
 PHY is used in Ethernet 10/100 Mbit references.
 In this paper, the term PHY is loosly used in reference to both MAU and
 PHY.
\end_inset 

) handle the OSI Layer 2 (Link/MAC) 
\begin_inset Formula $\Leftrightarrow $
\end_inset 

 OSI Layer 1 (Physical) interface.
 An PHY is a transceiver which may be able to Auto Negociate between different
 Ethernet standards.
 There are a number of different PHY prococols, which defines how the PHY
 pins should be used.
 Since PHYs conform to standards an Ethernet device does not need to be
 aware of what kind of physical medium it will be implemented in.
 An Ethernet device is also portable to all compatible PHYs, making it manufactu
rer independant.
\layout Standard

There are three common PHYs: AUI, MII and RMII.
 Each of them have their own charisterstics (as shown in table 
\begin_inset LatexCommand \prettyref{cap:MAU-PHY}

\end_inset 

).
 AUI is an old 10 Mbit interface only.
 MII was defined as the 10/100 MBit Ethernet was introduced.
 An MII design goal appears to be a high parallellism (data width), offering
 100 MBit at 25 MHz clockcycles.
 RMII was invented to reduce the number of pins needed by each interface,
 which is a major design concern in e.g.
 switches and other multi-interface ASIC/FPGA designs.
\layout Standard


\begin_inset Float table
wide false
collapsed true

\layout Caption


\begin_inset LatexCommand \label{cap:MAU-PHY}

\end_inset 

Common MAU and PHY protocols
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="4" columns="4">
<features>
<column alignment="left" valignment="top" leftline="true" width="5cm">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

MAU / PHY protocol
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Pins/Interface
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Width
\end_inset 
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

MBit
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Attachment Unit Interface (AUI)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

6 pins
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1 bit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

10
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Medium Independant Interface (MII)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

16 pins
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

 4 bit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

10/100
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Reduced Medium Independant Interface (RMII)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

8 pins
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

2 bit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

10/100
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Chapter


\begin_inset LatexCommand \label{cha:Xilinx-MicroBlaze}

\end_inset 

Xilinx MicroBlaze
\layout Section

The Xilinx MicroBlaze core
\layout Standard

Xilinx MicroBlaze is a small processor core geared for implementation in
 Xilinx FPGAs and embedded applications.
 A MicroBlaze platform consists of one or several MicroBlaze cores, interconnect
ed with a set of peripherals through a bus architecture.
\layout Standard

The MicroBlaze core is a highly optimized 
\begin_inset Quotes eld
\end_inset 

soft processor
\begin_inset Quotes erd
\end_inset 


\begin_inset Foot
collapsed true

\layout Standard

Processor implementation of configurable devices, such as FGPAs.
 Soft processors are usually distributed as source code or as netlists.
\end_inset 

 and among the fastest available to Xilinx FPGAs.
 The MicroBlaze instruction set is a typical instruction set familar to
 MIPS and other common RISC processors.
 
\layout Subsection

Xilinx MicroBlaze bus interfaces
\layout Standard

The MicroBlaze core contains two OPB master interfaces, IOPB which provides
 an instruction path and DOPB which provides a data path.
 The core also contains two Local Memory Buses (LMB) interfaces, ILMB which
 provide an instruction path and DLMB which provides a data path.
 
\layout Standard

A MicroBlaze system may utilize all four buses (as shown in figure 
\begin_inset LatexCommand \prettyref{cap:MicroBlaze}

\end_inset 

).
 A MicroBlaze platform must include a data path and an instruction path
 to the MicroBlaze core, therefor it will utilize 2, 3 or 4 busses.
\layout Standard


\begin_inset Float figure
wide false
collapsed true

\layout Caption


\begin_inset LatexCommand \label{cap:MicroBlaze}

\end_inset 

MicroBlaze Core with Bus Connections
\layout Standard
\align center 

\begin_inset Graphics FormatVersion 1
	filename images/microblaze_busconfig.eps
	display default
	size_type 2
	scale 75
	rotateOrigin leftBaseline
	lyxsize_type 0

\end_inset 


\end_inset 


\layout Subsubsection

Local Memory Buses (LMBs)
\layout Standard

The LMB bus is a highly optimized architecure, exploiting the Xilinx Dual
 Port Block RAM support for dual single-cycle memory access.
 This enables concurrent ILMB and DLMB access.
\layout Standard

A MicroBlaze platform with only LMB access is extremly efficient, however
 many FPGAs contains only a few kilobytes of Block RAM.
 
\layout Subsubsection

On-Chip Periperal buses (OPBs)
\layout Standard

Xilinx MicroBlaze is compatible with several other OPB devices, as stated
 in subsection 
\begin_inset LatexCommand \ref{sub:Xilinx-OPB}

\end_inset 

.
\layout Section

Embedded Development Kit (EDK)
\layout Standard

Xilinx main development kit for embedded applications and SoCs is the Embedded
 Development Kit (EDK).
 It contains a large set of OPB peripherals, Xilinx MicroBlaze soft processor,
 Xilinx PicoBlaze soft processor, and a powerfull up to date development
 kit.
\layout Section

MicroBlaze Development Kit (MDK)
\layout Standard

MDK is a stripped down version of EDK, and contain less peripherals.
 The software in MDK is based upon an old version of EDK.
\layout Subsection

MicroBlaze peripherals includeded in MDK
\layout Standard

MDK includes ten standard OPB peripherals, e.g.
 Memory Controller, UART, Watchdog, JTAG_UART, Interrupt controller.
 One of the peripherals is an OPB Aribitrator which allows 1 to 16 masters
 to share the OPB Bus.
 XilinxXilinx also provides documentation and tutorials on the subject of
 designing custom OPB Slaves for MicroBlaze platforms.
\layout Subsection

MDK platform tailoring utilities
\layout Standard

A MicroBlaze platform is specified in a MicroBlaze Hardware Specification
 (MHS) configuration file.
 A PERL-script platgen (
\begin_inset Quotes eld
\end_inset 

Platform Generator
\begin_inset Quotes erd
\end_inset 

) build platform top modules and synthesis them according to the MHS specificati
on.
 Typicall MHS options include which bus configuration to use and which periphera
ls to interface.
 MDK platgen is moderately simple while able to cope with most MDK beginners
 design issues.
\layout Subsection

MDK software development tools
\layout Standard

MDK includes most common development tools, such as an assembler, a compiler,
 a linker, a debugger and some other utilities.
 All these tools are based on famous and well verified GNU tools.
 This is a major benefit, as most developers have previous experience with
 the tools.
\layout Standard

The debugger is interfaced by JTAG or RS232.
 Any debugger familiar with either the GDB Remote Protocol or the Unified
 Debugging Interface standard may be used to debug MicroBlaze platforms.
 This allows a broad range of debuggers and debugger GUIs to be used with
 a MicroBlaze platform.
\layout Standard

MicroBlaze software utilize a small set of standard libraries (libc, libm
 etc) and driver directories which contain .c and .h files.
 The build of a MicroBlaze software system is performed by a PERL-script,
 libgen.
 Libgen reads a MicroBlaze Software Specification (MSS) configuration file.
 When executed, libgen compiles all drivers configured to be used and add
 the compiled drivers to the libc library.
 The .h files from the drivers are copied to the projects include path.
 Finally libgen creates mbio.h, a C-header with macros to each base address
 of any peripheral used in the MicroBlaze project.
\layout Standard

The project source code is compiled and linked with access to all associated
 .h files and the modified libc library.
\layout Subsection

Problems with MDK
\layout Standard

There are several problems with MDK which are easily encountered.
 Lack of in depth documentation, bugs and limitations in the MDK platform
 tailoring utility are the greatest problems.
\layout Subsubsection

MDK Documentation
\layout Standard

One problem with MDK is that is difficult to find information about MDK.
 Most searches at Xilinx (or common internet search enginees such as Google
 or Altavista) usually return information about EDK.
 While the MDK documentation is fine for beginner applications, in depth
 information is hard to find.
\layout Subsubsection

MDK platform tailoring limitations - OPB bus configuration
\layout Standard

MDK can be configured to use no OPB bus, an instruction bus (IOPB), a data
 bus (DOPB) or both OPB busses.
 Unfortunately, the MDK offers no configuration options for controlling
 if - or how - busses should be interconnected.
 
\layout Standard

If both DOPB and IOPB is used, they will share the same bus.
 When executing software on IOPB the shared bus will be highly utilizied,
 bus delays will increase and data throughput will dramaticly decrease.
 Shared bus has a significant negative performance impact.
\layout Standard

EDK offers a number of meassures to remedy these problems through a set
 of MHS directives which are not available in MDK.
 To implement the same in MDK, a designer must venture beyond platgen and
 modify automaticly generated VHDL files.
\layout Standard

One solution is a dedicated IOPB and a dedicated DOPB.
 This is a usefull solution if instructions are stored in ROM memory, or
 if a dual port RAM memory is used.
\layout Standard

Another solution is a DOPB to IOPB bridge, which allows a DOPB slave to
 act as a IOPB master.
 This solution allows DOPB to write to IOPB memory, and busses can operate
 concurrently except during DOPB to IOPB access.
\layout Subsubsection

MDK platform tailoring limitations - buffers and pads configuration
\layout Standard

A Virtex FPGA input/output pin is connected to a 
\begin_inset Quotes eld
\end_inset 

pad
\begin_inset Quotes erd
\end_inset 

.
 Each Virtex FPGA contains four global clock pads.
 These pads are specificly used for clock signals.
 Each pad is in turn connected to a buffer which handles how pad is interfaced
 by the design.
 However, there are a number of different buffers which each has it's own
 purpose and charistics.
 
\layout Standard

It is likely that a designer needs to control which buffert to use.
 An example of this is when a designer wish to implement a synchronous ethernet
 peripheral on a prototype board with RX_CLK, TX_CLK or REF_CLK connected
 to a global clock pad.
 Then the designer must use the not so common buffer type 
\begin_inset Quotes eld
\end_inset 

IBUFG
\begin_inset Quotes erd
\end_inset 

, because the common 
\begin_inset Quotes eld
\end_inset 

IBUF
\begin_inset Quotes erd
\end_inset 

 buffer cannot be connected to a global clock pad.
 
\layout Standard

MDK platgen can be configured weather to insert buffers or not.
 MDK platgen will auto-insert buffers as stated in table 
\begin_inset LatexCommand \ref{cap:Auto-inserted-buffers}

\end_inset 

.
 In the second option, platgen will generate a black box for implementation
 in larger designs, or merely to be used in a small wrapper which defines
 buffer should be used for each I/O signal.
\layout Standard

Another issue is that tristate buffers in peripherals must be written as
 a set of three I/O signals (input, output and tristate control).
 Although this is not a major drawback, it is an uneccesary restriction
 in how designers may choose to implement their design.
 Specificly, it may limit which blackboxes and source codes which are possible
 to easily utilize in a MicroBlaze peripheral design.
\layout Standard


\begin_inset Float table
wide false
collapsed true

\layout Caption


\begin_inset LatexCommand \label{cap:Auto-inserted-buffers}

\end_inset 

MDK synthesis auto-inserted buffers
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Buffer
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Inserted at I/O signals used as
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

BUFGP
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Clock signals
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

IBUF
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

General input
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OBUF
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

General output
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

IOBUF
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Tristate input/output
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Chapter


\begin_inset LatexCommand \label{cha:Xilinx-MicroBlaze-as-a-Network-SoC}

\end_inset 

Xilinx MicroBlaze as a Network SoC
\layout Section

MicroBlaze as a SoC system
\layout Standard

The MicroBlaze Development Kit is geared at developing System on Chip solutions.
 All standard peripherals are implemented in the same chip (FPGA) as the
 MicroBlaze core.
 It also contains typical I/O interfaces for microcontrollers and SoCs,
 such as: serial (RS232), memory (SRAM/FlashRAM) and General Purpose I/O.
\layout Section

MicroBlaze Network Support
\layout Standard

MicroBlaze does not include any network device.
 This is obviously a major drawback when designing network SoCs.
 However there are two MicroBlaze compatible OPB Ethernet peripherals available
 for sale at Xilinx.
 One of these is a small, simple Ethernet MAC.
 The other is a professional Ethernet MAC which is highly configurable and
 support most Ethernet modes.
 In a commercial SoC project, buying either of these MACs is simple way
 to get a well verified peripheral.
\layout Subsection

Customized Ethernet periperheral
\layout Standard

However, custom design of an Ethernet peripheral may be prefered.
 A custom made peripheral yields a number of interesting properties:
\layout Itemize

Cheap.
 Basic core design and verification can be one or two students as a part
 of a thesis or project course.
\layout Itemize

May be customized for specific application.
\layout Standard

The cost of an Ethernet module may not be a mayor interest in a commerical
 project, but in academic project where fundig is limited it might be.
 
\layout Standard

The level of application specific customization is of interest in a large
 number of projects.
 A few examples of interesting customizations are:
\layout Itemize

Speed or area optimized design
\layout Itemize

DMA or register access
\layout Itemize

Promiscious mode or not.
\layout Itemize

Classification, validation, or special handling of certain ethernet frames
\layout Standard

Classification, validation, and special handling of certain ethernet frames
 is performed by most ethernet peripherals, as it is a requirement for IEEE
 ethernet standard compliance.
 A typical ethernet peripheral will verify ethernet frames and take special
 actions upon receipt of Ethernet pause frames.
 It would not be difficult to extend such a classification module to also
 handle layer 3 frames, such as IPv4, which might of interest to reduce
 MicroBlaze CPU utilization.
 By lowering utilization, software application may be simplified and functionall
ity may be reduced.
\layout Chapter


\begin_inset LatexCommand \label{cha:Development-of-Microblaze-ethernet-peripherals}

\end_inset 

Development of MicroBlaze Ethernet peripherals
\layout Section

Design requirements and limitations
\layout Subsection

Full Duplex only
\layout Standard

In principal, supporting the entire range of Full/Half/Auto Duplex combinations
 is easy, but it takes time and effort to develop and verify.
 For simplicty, all ethernet devices were developed for Full Duplex only,
 which is by far the most common Ethernet Duplex mode today.
\layout Subsection

Ethernet Interfaces (PHY): MII and RMII
\layout Standard

The Ethernet devices were designed to be used on two different prototype
 boards, one which was based on an MII Ethernet Interface, one which was
 based on a Reduced MII (RMII) Ethernet Interface.
 Therefore, the designs needed to be capable to manage both interfaces.
\layout Section

Implementation
\layout Subsection

Eth Version 1.00, Revision A
\layout Standard

Eth Version 1.00 Revision A is designed to be a very simple MAC, portable
 to most FPGA and prototype boards.
\layout Subsubsection

Fully synchronous
\layout Standard

To simplify design and verification, no asynchronous logic is used in the
 design.
 Asynchronous logic, such as an asynchronous FIFO, is often harder to verify
 and less architecture independant.
 Asynchronous logic in FPGA implementations require a clock net dedicated
 to the ethernet clocks.
 Therefore this design decision places less requirements upon the design
 of target prototype board and simplify verification.
\layout Standard

It should be noted that due to this design choice, Ethernet Interface clocks
 must be sampled fast enough to detect rising edge and change values prior
 to falling edge.
 Thus, system clock must be approximately 5 times faster than Ethernet interface
 clocks.
 Table 
\begin_inset LatexCommand \prettyref{cap:Min-SysClk}

\end_inset 

 shows the interface clocks and resulting minimal system clock frequence.
\begin_inset Float table
wide false
collapsed true

\layout Caption


\begin_inset LatexCommand \label{cap:Min-SysClk}

\end_inset 

Minimum System Clock for reliable synchronous ethernet sampling
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Interface
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Interface Clock
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Minimum System Clock
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

MII 10 MBit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

2.5 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

12.5 MHz
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

MII 100 MBit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

25 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

125 MHz
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RMII 10 MBit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

5 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

25 MHz
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RMII 100 MBit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

50 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

250 MHz
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Subsubsection

System Clock and Performance Impact
\layout Standard

With respect to target architecture (Virtex 800, Speedgrade 4), design reaches
 50 MHz after synthesis.
 As shown in table 
\begin_inset LatexCommand \prettyref{cap:Min-SysClk}

\end_inset 

, this only enables 10 MBit implementations.
\layout Standard

The OPB bus is operating at 50 MHz and takes two cycled for each 32 bit
 transfere.
 This yields a theoretical switching capacity of 32*50/2 = 800 MBit.
 This should be enough for a very large number of 10 MBit devices.
 
\layout Subsubsection

Modular design
\layout Standard

To provide a simple, extendable and reusable interface, each component is
 design with modularity and reusability in mind.
 
\layout Standard

All receive-logic is placed in an RX core (figure 
\begin_inset LatexCommand \prettyref{cap:RX-Core}

\end_inset 

), and all send logic in an TX core (figure 
\begin_inset LatexCommand \prettyref{cap:TX-Core}

\end_inset 

).
 The cores are mapped into a small top-module which handles bus interconnections.
 As shown in table 
\begin_inset LatexCommand \prettyref{cap:EthModules}

\end_inset 

, all parts of the design have successfully been kept at a small number
 of short and easily read VHDL files.
\layout Standard


\begin_inset Float table
wide false
collapsed true

\layout Caption


\begin_inset LatexCommand \label{cap:EthModules}

\end_inset 

Eth Version 1.00 Revision A VHDL files
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Modules
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

VHDL Files/Entities
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Avgerage number of lines per file
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

General
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

4
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

93
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RX Core
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

7
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

112
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

TX Core
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

6
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

133
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OPB Slave
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

250
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\begin_inset Float figure
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:RX-Core}

\end_inset 

Eth Version 1.00 Revision A, RX Core
\layout Standard
\align center 

\begin_inset Graphics FormatVersion 1
	filename images/ethrx-core-hack.eps
	display default
	size_type 1
	width 40page%
	height 90page%
	rotateOrigin leftBaseline
	lyxsize_type 0

\end_inset 


\end_inset 


\begin_inset Float figure
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:TX-Core}

\end_inset 

Eth Version 1.00 Revision A, TX Core
\layout Standard
\align center 

\begin_inset Graphics FormatVersion 1
	filename images/ethtx-core-hack.eps
	display default
	size_type 1
	width 60page%
	height 25page%
	rotateOrigin leftBaseline
	lyxsize_type 0

\end_inset 


\end_inset 


\layout Subsection

Eth V 1.00, Revision C
\layout Standard

This is a redisign of Eth V.100 Revision A.
 It is designed to reach 100 MBit at target technology MII, Virtex 800 Speedgrad
e -4 with system clock set to 50 MHz.
\layout Subsubsection

Asynchronous
\layout Standard

The asynchronous solution clock most of the design upon ethernet PHY clock
 which is significantly slower than the 50 MHz system clock.
 Only the register files and the top module is clocked upon system clock.
 The design utilize open loop to move from ethernet clock domain to system
 clock domain, thus the minimum system clock is can be calculated as shown
 in formula 
\begin_inset LatexCommand \prettyref{cap:EthV1.00C-minsysclk}

\end_inset 

.
 Given a clock drift worst case of 19%
\begin_inset Foot
collapsed true

\layout Standard

19% is the worst case clockdrift used in a simulation model supplied by
 Robert Wikander of Switchcore for verification of academic ethernet peripherals.
\end_inset 

, this yields that system clock must be 23% faster than ethernet clock,
\layout Standard


\begin_inset Float algorithm
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:EthV1.00C-minsysclk}

\end_inset 

Eth V1.00 Revision C mininum system clock frequency
\layout Standard
\align center 

\begin_inset Formula $f_{sysclk}\geq \frac{1}{t_{phyclk}-\left|t_{phydrift}\right|-\left|t_{sysdrift}\right|}$
\end_inset 


\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Variable
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Meaning
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $f_{sysclk}$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

System clock frequency 
\begin_inset Formula $\left(Hz\right)$
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $t_{phyclk}$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Ethernet PHY Clock period 
\begin_inset Formula $\left(s\right)$
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $t_{phydrift}$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Ethernet PHY Clock drift, estimated worst case 
\begin_inset Formula $\left(s\right)$
\end_inset 


\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $t_{sysdrift}$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

System clock drift 
\begin_inset Formula $\left(s\right)$
\end_inset 


\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Section

Verification
\layout Subsection

Testbenches
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Caption

Modular Testbench
\layout Standard
\align center 

\begin_inset Graphics FormatVersion 1
	filename images/testbench1.eps
	display default
	size_type 2
	scale 50
	rotateOrigin leftBaseline
	lyxsize_type 0

\end_inset 


\end_inset 


\layout Subsubsection

Regression tests
\layout Standard

Testbenches are written to be highly automized and generate logfiles of
 assert notes, warnings and errors.
 Therefore, human inspection of waveforms are rarely needed to verify that
 recently added code does not break previous functionallity.
 Regression tests proved to be a highly usefull tool and considerably shortened
 verification cycles by automaticly finding errors in design.
\layout Subsubsection

Modular testbench: Ethernet Model
\layout Standard

To simplify the main testbench, verification of Ethernet correctness is
 performed in a stand alone module.
 The modul identifies short packets, long packets, short interframe gaps,
 incorrect FCS and a number of other Ethernet violations.
 Such errors are asserted as warnings, and packets are outputed as assert
 notes in hexadecimal notation.
\layout Subsubsection

Modular testbench: OPB Loopback Model
\layout Standard

Verification of OPB behaivor correctness is performed in the OPB Loopback
 Model.
 The model is able to identify some but not all possible violations of the
 OPB bus.
 Additionally, the OPB loopback acts as a loopback device: Any packet recieved
 by the device will be outputed by the device, without modification.
\layout Subsection

Multiple Compilation and Synthesis
\layout Standard

Ethenet devices were compiled and simulated with two common simulation environme
nts, Modeltech Modelsim and Cadence Logic Verification.
 Ethernet devices were compiled and synthesized with Xilinx Synthesis Techonolog
y (XST) and Synplicity Synplify Pro.
 By testing code in a large number of different tools, unportable VHDL construct
s have been identified and removed, as well as most code cunstructs which
 cause warnings in any of the tools used.
\layout Subsection

Packet monitoring with The Ethereal Network Analyzer
\layout Standard

The The Ethereal Network Analyzer (
\begin_inset Quotes eld
\end_inset 

Ethereal
\begin_inset Quotes erd
\end_inset 

) was used to capture Ethernet packets, efficiently monitoring network conversat
ions between testcomputer and ethernet devices.
 Overall, Ethereal was not very usefull for finding hardware/VHDL errors,
 but a powerfull tool for debugging software such as IP stacks.
\layout Standard


\begin_inset Float figure
wide false
collapsed false

\layout Caption

Test Setup #1
\layout Standard
\align center 

\begin_inset Graphics FormatVersion 1
	filename images/testsetup1.eps
	display default
	size_type 2
	scale 75
	rotateOrigin leftBaseline
	lyxsize_type 0

\end_inset 


\end_inset 


\layout Subsection

Real World Tests
\layout Standard

To verify hardware robustness, the ethernet devices were used in a number
 of real world tests.
 Some of them, such as a simple ICMP Echo Request / ICMP Echo Reply (
\begin_inset Quotes eld
\end_inset 

ping
\begin_inset Quotes erd
\end_inset 

) test, was performed for several hours with 0 packet loss.
 All real world tests indicates that design is robust.
\layout Chapter


\begin_inset LatexCommand \label{cha:Comparing-Ethernet-peripherals}

\end_inset 

Comparing Ethernet peripherals
\layout Standard

Comparing peripherals is hard.
 One factor is features, e.g.
 does the application support DMA? Another factor is speed - how slow can
 the design be clocked? How fast? Yet another factor is area, a large peripheral
 waste area which could be used for something else instead.
 Finally, quality is an important factor which is hard to meassure.
\layout Standard

Given all these set of factors, it is not feasable to name a single peripheral
 which is optimal for all applications.
 However it is possible to compare peripherals and reason which is best
 for certain applications.
\layout Standard

A number of Ethernet peripherals have been compared: EMAC Lite - Xilinx
 OPB Ethernet Lite Media Access Controller, EMAC - Xilinx OPB Ethernet Media
 Access Controller, EthMac - Opencores.org 10/100 Ethernet MAC, Bandung -
 Bandung Institute of Technolgy 10/100 Ethernet MAC, Eth Version 1.00 Revision
 A and Eth Version 1.00 Revision C.
\layout Standard

Neither EthMac nor Bandung is an OPB device.
 Bandung has been included because it is a published student project and
 therefor created under conditions similar to Eth Version 1.00.
 EthMac has been included because it is a well verified MAC, has been in
 real world use, and is open source.
 It is reasonable that given some work, both Bandung and EthMac could be
 converted into OPB devices.
\layout Section

Feature comparision
\layout Standard

The following set of features has been compared in table 
\begin_inset LatexCommand \ref{cap:Ethernet-peripherals-feature}

\end_inset 

:
\layout Itemize

Asynchronous, e.g.
 the peripheral make use of MII/RMII clock signals to clock flipflops/registers.
 This is common practice to reach 100 MBit but has major a drawback: In
 several FPGAs, you only have a few clock input pins.
 Utilizing MII/RMII clocks in a peripheral may limit the application to
 a single ethernet peripheral.
\layout Itemize

System bus.
 OPB is perfered because as it is the only native I/O bus in MicroBlaze.
\layout Itemize

DMA.
 Is the peripheral able to do direct memory access? This is important to
 make high performance applications.
\layout Itemize

MII Management.
 Is the peripheral able to read/write MII Management registers?
\layout Itemize

PAUSE frame support.
 This is an important Ethernet standard which prevents network congestions.
 If not supported in hardware, it should be supported in the software/drivers.
\layout Itemize

RMII support.
 RMII is a pin-reduced MII-similar interface, prefered in multi-interface/periph
erals designs such as switches.
\layout Standard

The only RMII peripherals are Eth Version 1.00 Revision A and C.
 This is a major advantage in multi-interface designs.
 EMAC Lite and Eth Version 1.00 Revision A are synchronous designs.
 This gives it future advantage in multi-interface designs since it does
 not utilize clock pins (which are scarced in some FPGA).
\layout Standard

The peripherals can be divided into a set of simple perhiperals and none
 simple peripherals.
 EMAC and EthMac support a large set of features (DMA, MII Management, Pause
 frames) while the others does not.
 Therefor EMAC and EthMac are preferable if an application require a fullscale
 DMA-capable interface.
 EMAC Lite, Bandung and Eth Version 1.00 Revision A and C are preferable
 if you only need a simple interface.
\layout Standard


\begin_inset Float table
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:Ethernet-peripherals-feature}

\end_inset 

Ethernet peripherals feature comparision
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="7" columns="7">
<features>
<column alignment="left" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Device
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Async
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bus
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

DMA
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Mgt
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Pause
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RMII
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

EMAC Lite
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OPB
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

EMAC
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OPB
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

EthMac
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

WB
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bandung
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Eth v1.00 A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OPB
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Eth v1.00 C
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

OPB
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

No
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Yes
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 

 
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="5" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Header/Note
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Description / Explaination
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Async
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Asynchronous; utilize MII/RMII clocks to trigger flipflops
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Mgt
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

MII Management interface support
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Pause
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Ethernet full duplex PAUSE frame support
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RMII
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Reduced MII interface support
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Section

Speed comparision
\layout Standard

Speed comparision is performed against a Xilinx Virtex-E FPGA (chip xsv2000e-8-F
G1156).
 One reason for using this particiluar FPGA is that one prototype board
 available for during the evaluation was Virtex-E based.
 Another reason is that speed/area statistics for this particiluar FPGA
 is included EMAC / EMAC Lite documentation.
\layout Standard


\begin_inset Formula $f_{max}$
\end_inset 

 is the maximum system clock frequency.
 For configurable designs (such as EMAC / EMAC Lite), the greatest value
 for 
\begin_inset Formula $f_{max}$
\end_inset 

 is listed.
 For Eth v1.00 Revision A and C, MII configuration is used.
\layout Standard


\begin_inset Formula $f_{max}$
\end_inset 

 is derived by synthesising the design with XST (optimization level 2 and
 optimization mode 
\begin_inset Quotes eld
\end_inset 

speed
\begin_inset Quotes erd
\end_inset 

).
 Then the netlist is passed through the Xilinx Place & Route flow (overall
 effort set to 5, extra effort set to 2) utilizing a set of timing constraints
 used by Xilinx in EMAC documentation.
 The system clock timespecification is tweaked and flow re-started until
 all a minimum period is found for which all constraints are met.
 Then 
\begin_inset Formula $f_{max}$
\end_inset 

 is calculated as 
\begin_inset Formula $f_{max}=\frac{1000}{system\, clock\, period\, (nanoseconds)}$
\end_inset 

 MHz.
\layout Standard

For EMAC and EMAC Lite, the corosponding values are extracted from the specifica
tion.
\layout Standard


\begin_inset Float algorithm
wide false
collapsed true

\layout Caption

UCF Ethernet Timing constraints
\layout LyX-Code

NET "opb_clk" TNM_NET = "opb_clk"; 
\layout LyX-Code

TIMESPEC "TS_opb_clk" = PERIOD "opb_clk" 7.5 ns HIGH 50 %;
\layout LyX-Code

\layout LyX-Code

NET "rx_clk" TNM_NET = "RXCLK_GRP"; 
\layout LyX-Code

NET "tx_clk" TNM_NET = "TXCLK_GRP"; 
\layout LyX-Code

TIMESPEC "TSTXOUT" = FROM "TXCLK_GRP" TO "PADS" 10 ns; 
\layout LyX-Code

TIMESPEC "TSRXIN" = FROM "PADS" TO "RXCLK_GRP" 6 ns; 
\layout LyX-Code

NET "opb_rst" TIG; 
\layout LyX-Code

NET "rx_clk" USELOWSKEWLINES; 
\layout LyX-Code

NET "tx_clk" USELOWSKEWLINES; 
\layout LyX-Code

NET "tx_clk" MAXSKEW= 2.0 ns; 
\layout LyX-Code

NET "rx_clk" MAXSKEW= 2.0 ns; 
\layout LyX-Code

NET "rx_clk" PERIOD = 40 ns HIGH 14 ns; 
\layout LyX-Code

NET "tx_clk" PERIOD = 40 ns HIGH 14 ns; 
\layout LyX-Code

NET "rx_d<3>" NODELAY; 
\layout LyX-Code

NET "rx_d<2>" NODELAY; 
\layout LyX-Code

NET "rx_d<1>" NODELAY; 
\layout LyX-Code

NET "rx_d<0>" NODELAY; 
\layout LyX-Code

NET "rx_dv" NODELAY; 
\end_inset 


\layout Standard

The results are shown in table 
\begin_inset LatexCommand \ref{cap:Ethernet-peripherals-performance}

\end_inset 

.
\layout Standard


\begin_inset Float table
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:Ethernet-peripherals-performance}

\end_inset 

Ethernet peripherals performance comparision
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="9" columns="6">
<features>
<column alignment="left" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $f_{min}$
\end_inset 


\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

MII
\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="1" alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RMII
\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Device
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

10 MBit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

100 MBit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

10 MBit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

100 MBit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $f_{max}$
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

EMAC Lite
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

5 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

50 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

80.8 MHz
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

EMAC
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

5 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

50 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

88.0 MHz
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

EthMac
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Bandung
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $(a)$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $(a)$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $(a)$
\end_inset 


\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Eth v1.00 A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

12.5 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

125 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

25 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

N/A
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

137 MHz
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Eth v1.00 C
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

3.1 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

31 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

6.2 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

62 MHz
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

137 MHz
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Header/Note
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Description / Explaination
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $f_{min}$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Minimum system clock frequency
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $f_{max}$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Maximum system clock frequency (Virtex-E, speedgrade -8)
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Formula $(a)$
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Bandung MAC utilize MII clocks.
 No system clock.
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Section

Area comparision
\layout Section

Quality comparision
\layout Standard

EMAC Lite and EMAC is considered production quality by the Xilinx cooperation.
 EhMac is considered production quality by the opencores.org developers.
 These three MACs have been tested by developers as well as number of users/cust
omers.
 Therefor, they are by far the best verified devices.
\layout Standard

Bandung and Eth Version 1.00 Revision A, C are not as well verified.
 
\layout Standard

The Eth Version 1.00 revisions has been reused by a small number of students.
 Eth has also passed a number of verification tests.
 Therefor the Eth 1.00 revisions are considered to be of good academic quality
 but more tests are needed before they can be considered to be of production
 quality.
 
\layout Standard

There is not much information regarding verification and reuse Bandung MAC.
 Comments on the Bandung MAC homepage seems to indicate that the project
 was terminated prior to completetion.
 Bandung quality therefor is considered poor.
\layout Section

Details about the devices used in analasysis
\layout Subsection

EMAC Lite - Xilinx OPB Ethernet Lite Media Access Controller
\layout Standard

50 MHz for 100 MBit
\layout Standard

5 MHz for 10 MBit
\layout Standard

Virtex-E -8; 80.2 MHz full duplex, 75.5 MHz half
\layout Standard

no MII management
\layout Standard

no pause frame support
\layout Subsection

EMAC - Xilinx OPB Ethernet Media Access Controller
\layout Standard

multiple packets, 2 or 4 kb fifos, up to 16 packets per fifo, pause frame
 support, MII management, DMA or FIFO-read-registers, autopad, promiscious
 mode optional, etc etc 
\layout Subsection

EthMac - Opencores.org 10/100 Ethernet MAC
\layout Subsection

Bandung - Bandung Institute of Technolgy 10/100 Ethernet MAC
\layout Standard

The Bandung MAC is a simple Ethernet MAC.
 It is not designed for SoC implementation, instead it is externally interfaced
 using the prototype board's SRAM as a shared medium.
 A PC controlls the MAC utilizing the shared medium.
 Apparently, the transmit modules are broken (cite: 
\begin_inset Quotes eld
\end_inset 

the transmitter can only send a few bytes
\begin_inset Quotes erd
\end_inset 

).
 Appears to be a half-finnished academic design.
\layout Standard

Key aspects:
\layout Itemize

10/100 MBit, MII only
\layout Itemize

Half Duplex supported
\layout Itemize

Full Duplex supported, but no PAUSE frame support
\layout Itemize

No system bus - Interfaced through shared SRAM medium
\layout Itemize

Asynchronous
\layout Itemize

No MII Management module
\layout Chapter


\begin_inset LatexCommand \label{cha:Network-software-for-Microblaze}

\end_inset 

Network software for MicroBlaze
\layout Standard

A Network System on Chip could do everything in ASIC hardware or configurable
 blocks (FPGA/CPLD).
 However, there are several reasons to utilize a processor and run software
 on it:
\layout Itemize

Software can be tested and verified in other environments before they are
 implemented for the SoC being developed, shortening design times.
\layout Itemize

Software tends to be easier to develop than hardware (HDL code).
\layout Itemize

Software version could be upgraded during operation, perhaps even by remote.
 Programmable logic (e.g.
 FPGA) however usually requires manual reprogramming, physical acess to
 the FPGA and takes the the chip offline during reprogramming.
 ASICs without any processor or programmable logic would be even harder
 to update.
 Thus, software makes the chip more flexible and easier to fix if bugs are
 detected after distribution.
\layout Section

Small TCP/IP stacks for embedded applications
\layout Standard

In the context of small TCP/IP stacks, it is interesting to know 
\begin_inset Quotes eld
\end_inset 

how small is a small TCP/IP stack?
\begin_inset Quotes erd
\end_inset 

.
 The answer is simple - it depends upon what you are comparing to.
 Extreme application specific stacks may only contain 256 bytes of code,
 a general stack is hard to make small.
\layout Standard

Therefore, we define a number of heuristics we want from a small TCP/IP
 stack:
\layout Itemize

The TCP/IP stack should provide both a recieve and a send packet to datagram
 oriented handling functions (ARP, ICMP, UDP and others).
 This is for ease of use, in practice it is not needed but it considerably
 simplifies development and verification.
 As these bufferts can be reused by all functions, it is prefered that they
 are implemented by global arrays or pointers, instead of local variables.
\layout Itemize

The stack should be general and reusable, not application specific.
\layout Itemize

The stack should be functional.
 It should generate correct packets (correct IP checksum etc).
\layout Itemize

The stack should not be user oriented - there aren't users multiple users
 in an embedded application, don't waste memory handling such cases.
\layout Itemize

The stack should be modular.
 If an application only need ARP+UDP, or ARP+ICMP, it should not be required
 to implement memory expensive protocols such as TCP.
\layout Itemize

The stack should be available as well commented/documented source code,
 as it is likely that an engineer may wish to tweak the stack for the embedded
 application the engineer is developing.
\layout Subsection

Xilinx XilNet
\layout Standard

Xilinx Xilnet is included with MicroBlaze, however it is the only software
 library in the 
\begin_inset Quotes eld
\end_inset 

unsupported
\begin_inset Quotes erd
\end_inset 

 directory.
 The documentation is entirely function oriented, no documentation of overal
 design idea is provided.
 Xilinx does not provide a MAC or reference implementation of XilNet's layer
 2 API, or any application used to test XilNet.
\layout Subsubsection

Modularity
\layout Standard

XilNet is not modular.
 Although XilNet modular at file level (arp.c, tcp.c and such), there are
 interdepencies between the different modules that are not motivated.
 XilNet does not provide any meassure to remove TCP/IP substacks an engineer
 might wish to remove from his application.
 To do this, you must modify a number of if() statements and insert a number
 of #ifdef #else #endif preprocessor statements into the code.
\layout Subsubsection

Functionallity
\layout Standard

XilNet generated ICMP packets with bad IP checksum and invalid ICMP packet.
 Weather this is a general flaw in XilNet, or a failure by the author to
 use XilNet correctly, is currently unknown.
 XilNet documentation leaves little or no help in debugging this.
\layout Standard

XilNet TCP support is limited.
 It supports only a single concurrent TCP connection.
\layout Subsubsection

Overall
\layout Standard

XilNet appears to be written with the purpose of labeling MicroBlaze as
 a Internet enabled processor.
 Code quality, modularity and functionallity is poor.
 
\layout Chapter


\begin_inset LatexCommand \label{cha:Conclusions}

\end_inset 

Conclusions
\layout Chapter


\begin_inset LatexCommand \label{cha:Future-work}

\end_inset 

Future work
\the_end
